[{"path":"https://t-kalinowski.github.io/guildai-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tomasz Kalinowski. Author, copyright holder, maintainer.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kalinowski T (2022). guildai: R interface guildai. R package version 0.0.0.9001, https://t-kalinowski.github.io/guildai-r/.","code":"@Manual{,   title = {guildai: R interface to guildai},   author = {Tomasz Kalinowski},   year = {2022},   note = {R package version 0.0.0.9001},   url = {https://t-kalinowski.github.io/guildai-r/}, }"},{"path":[]},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"guildai","dir":"","previous_headings":"","what":"guildai","title":"R interface to guildai","text":"guildai provides suite tools tracking, visualizing, managing training runs experiments. {guildai} R package successor {tfruns} package. Track hyperparameters, metrics, output, source code every training run. Compare hyperparmaeters metrics across runs find best performing model. Automatically generate reports visualize individual training runs comparisons runs. changes source code required.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R interface to guildai","text":"R package provides interface Guild AI Core. R package automatically download install Guild AI Core first use, can call install_guild() directly customize installation. can install guildai package follows: Guild AI can used machine learning framework, even framework . introductory example, ’ll start Keras model applied fashion mnist dataset. ’ve used Keras R want follow along machine, can install like :","code":"# install.packages(\"guildai\") remotes::install_github(\"t-kalinowski/guildai-r\") guildai::install_guild() install.packages(\"keras\") keras::install_keras()"},{"path":[]},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"launch-a-run","dir":"","previous_headings":"Hello World","what":"Launch a run","title":"R interface to guildai","text":"start, ’ll use example training script, “train.R”. looks like: train model guildai, use guild_run() function place source() function execute R script. example: launch new R process isolated run directory using provided script. default, output stream run shown R console (output stream see source(\"train.R\", echo = TRUE) R --file=train.R).","code":"library(keras)  # Prepare data ----  fashion_mnist <- dataset_fashion_mnist()  c(train_images, train_labels) %<-% fashion_mnist$train c(test_images, test_labels) %<-% fashion_mnist$test  train_images <- train_images / 255 test_images <- test_images / 255  # Define model ----  units <- 64  model <- keras_model_sequential(input_shape = c(28, 28)) %>%   layer_flatten() %>%   layer_dense(units = units, activation = 'relu') %>%   layer_dense(units = 10, activation = 'softmax')   learning_rate <- 0.001  model %>% compile(   optimizer = optimizer_adam(learning_rate),   loss = 'sparse_categorical_crossentropy',   metrics = c('accuracy') )  model  # Fit model ----  batch_size <- 32 epochs <- 10  history <- model %>%   fit(train_images, train_labels,       validation_split = 0.2,       batch_size = batch_size,       epochs = epochs,       verbose = 2)  plot(history)  # Evaluate model ----  score <- model %>%   evaluate(test_images, test_labels,            verbose = 0) %>%   as.list()  cat('test_loss:', score$loss, \"\\n\") cat('test_accuracy:', score$accuracy, \"\\n\")  # save_model_tf(model, \"model.keras\") # saveRDS(history, \"history.rds\") guild_run(\"train.R\") ## > library(keras) ## > # Prepare data ---- ## > ## > fashion_mnist <- dataset_fashion_mnist() ## > c(train_images, train_labels) %<-% fashion_mnist$train ## > c(test_images, test_labels) %<-% fashion_mnist$test ## > train_images <- train_images / 255 ## > test_images <- test_images / 255 ## > # Define model ---- ## > ## > units <- 64 ## > model <- keras_model_sequential(input_shape = c(28, 28)) %>% ## +   layer_flatten() %>% ## +   layer_dense(units = units, activation = 'relu') %>% ## +   layer_dense(units = 10, activation = 'softmax') ## > learning_rate <- 0.001 ## > model %>% compile( ## +   optimizer = optimizer_adam(learning_rate), ## +   loss = 'sparse_categorical_crossentropy', ## +   metrics = c('accuracy') ## + ) ## > model ## Model: \"sequential\" ## ________________________________________________________________________________ ##  Layer (type)                       Output Shape                    Param # ## ================================================================================ ##  flatten (Flatten)                  (None, 784)                     0 ##  dense_1 (Dense)                    (None, 64)                      50240 ##  dense (Dense)                      (None, 10)                      650 ## ================================================================================ ## Total params: 50,890 ## Trainable params: 50,890 ## Non-trainable params: 0 ## ________________________________________________________________________________ ## > # Fit model ---- ## > ## > batch_size <- 32 ## > epochs <- 10 ## > history <- model %>% ## +   fit(train_images, train_labels, ## +       validation_split = 0.2, ## +       batch_size = batch_size, ## +       epochs = epochs, ## +       verbose = 2) ## Epoch 1/10 ## 1500/1500 - 4s - loss: 0.5404 - accuracy: 0.8120 - val_loss: 0.4449 - val_accuracy: 0.8452 - 4s/epoch - 2ms/step ## Epoch 2/10 ## 1500/1500 - 2s - loss: 0.4068 - accuracy: 0.8569 - val_loss: 0.3798 - val_accuracy: 0.8657 - 2s/epoch - 2ms/step ## Epoch 3/10 ## 1500/1500 - 3s - loss: 0.3704 - accuracy: 0.8674 - val_loss: 0.4004 - val_accuracy: 0.8585 - 3s/epoch - 2ms/step ## Epoch 4/10 ## 1500/1500 - 2s - loss: 0.3423 - accuracy: 0.8768 - val_loss: 0.3512 - val_accuracy: 0.8774 - 2s/epoch - 2ms/step ## Epoch 5/10 ## 1500/1500 - 2s - loss: 0.3212 - accuracy: 0.8840 - val_loss: 0.3708 - val_accuracy: 0.8694 - 2s/epoch - 1ms/step ## Epoch 6/10 ## 1500/1500 - 2s - loss: 0.3055 - accuracy: 0.8886 - val_loss: 0.3538 - val_accuracy: 0.8725 - 2s/epoch - 1ms/step ## Epoch 7/10 ## 1500/1500 - 2s - loss: 0.2944 - accuracy: 0.8920 - val_loss: 0.3490 - val_accuracy: 0.8759 - 2s/epoch - 2ms/step ## Epoch 8/10 ## 1500/1500 - 2s - loss: 0.2819 - accuracy: 0.8964 - val_loss: 0.3354 - val_accuracy: 0.8788 - 2s/epoch - 1ms/step ## Epoch 9/10 ## 1500/1500 - 2s - loss: 0.2725 - accuracy: 0.8997 - val_loss: 0.3381 - val_accuracy: 0.8789 - 2s/epoch - 1ms/step ## Epoch 10/10 ## 1500/1500 - 2s - loss: 0.2642 - accuracy: 0.9016 - val_loss: 0.3301 - val_accuracy: 0.8841 - 2s/epoch - 1ms/step ## > plot(history) ## > # Evaluate model ---- ## > ## > score <- model %>% ## +   evaluate(test_images, test_labels, ## +            verbose = 0) %>% ## +   as.list() ## > cat('test_loss:', score$loss, \"\\n\") ## test_loss: 0.35901263356208801 ## > cat('test_accuracy:', score$accuracy, \"\\n\") ## test_accuracy: 0.87629997730255127 ## > # save_model_tf(model, \"model.keras\") ## > # saveRDS(history, \"history.rds\") ## > ## >"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"view-runs","dir":"","previous_headings":"Hello World","what":"View Runs","title":"R interface to guildai","text":"Call guild_view() launch Guild View application, can use visualize manage runs. can use search, filter, visualize, compare, view diffs run source code output, ! also bundles TensorBoard additional visualization tool viewing runs. TODO: SCREENSHOTS Retrieve data frame run information R using ls_runs(): ls_runs() returns data frame information runs. introduction far, ’ve launched 1 run, ls_runs() returns 1-row data frame.","code":"guild_view() run <- ls_runs() tibble::glimpse(run) ## Rows: 1 ## Columns: 15 ## $ label       <chr> \"batch_size=32.0 epochs=10.0 learning_rate=0.001 units=64.… ## $ tags        <list> <> ## $ marked      <lgl> FALSE ## $ flags       <tibble[,4]> <tbl_df[1 x 4]> ## $ scalars     <tibble[,2]> <tbl_df[1 x 2]> ## $ operation   <chr> \"train.R\" ## $ started     <dttm> 2022-11-15 10:32:45 ## $ stopped     <dttm> 2022-11-15 10:33:17 ## $ comments    <list> [<tbl_df[0 x 4]>] ## $ status      <chr> \"completed\" ## $ exit_status <int> 0 ## $ deps        <list> [] ## $ project_dir <chr> \"/home/tomasz/guild/guildai-r\" ## $ dir         <chr> \"/home/tomasz/guild/guildai-r/.guild/runs/d38c0b8580a2420… ## $ id          <chr> \"d38c0b8580a24205b109292b4b9255f6\""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"run-directories","dir":"","previous_headings":"Hello World","what":"Run Directories","title":"R interface to guildai","text":"guild_view() ls_runs() provide two convenient ways gather present information runs. Importantly however, run directory easily accessible. ’ll find files, plots, logs, output generated run. run directory also contains additional metadata runs guild recorded, like starting random seed, environment variables, information package versions, metadata frequently useful reproducability.","code":"fs::dir_tree(run$dir[1], all = TRUE) ## /home/tomasz/guild/guildai-r/.guild/runs/d38c0b8580a24205b109292b4b9255f6 ## ├── .guild ## │   ├── attrs ## │   │   ├── cmd ## │   │   ├── deps ## │   │   ├── env ## │   │   ├── exit_status ## │   │   ├── flags ## │   │   ├── host ## │   │   ├── id ## │   │   ├── initialized ## │   │   ├── label ## │   │   ├── op ## │   │   ├── platform ## │   │   ├── plugins ## │   │   ├── r-random-seed ## │   │   ├── run_params ## │   │   ├── sourcecode_digest ## │   │   ├── started ## │   │   ├── stopped ## │   │   ├── user ## │   │   ├── user_flags ## │   │   └── vcs_commit ## │   ├── events.out.tfevents.1668526396.horse.120400.0 ## │   ├── manifest ## │   ├── opref ## │   ├── output ## │   ├── output.index ## │   └── sourcecode ## │       └── train.R ## └── plots ##     └── Rplot001.png"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"comparing-runs","dir":"","previous_headings":"Hello World","what":"Comparing Runs","title":"R interface to guildai","text":"Let’s make couple changes training script see can improve model performance. ’ll change number units first dense layer 128, change learning_rate 0.001 0.003 run 20 rather 10 epochs. making changes source code re-run script using guild_run() : individual metrics test_loss test_accuracy visible comparison table Guild View application.","code":"guild_run(\"train.R\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"flags","dir":"","previous_headings":"","what":"Flags","title":"R interface to guildai","text":"Flags form run inputs, paramaterization. action just described, modifying learning_rate, epochs units values script launching second run, can performed guild_run() using flags interface. default, guild identifies top-level assignments scalar literals R script run flags can modified per-run. Flags can numeric (double, integer), string, boolean, complex. words, expressions like R script identified flags: See flags available R script calling guild_run() \"--help-op\" (syntax later). can launch run different flag values like : Now, inspect run sources view_runs_diff(), see source file last run updated flag values, modified manually. flags interface useful hyperparamater optimization. ’s simplest, can iterate set flag values want pass separate calls guild_run(): can also pass multiple values flag, guild automatically expand combinations grid search. example, launch 4 training runs, run unique pairing flag values: Another way launch batch runs pass data frame flags values, row corresponding run.","code":"units <- 64 learning_rate <- 0.001 batch_size <- 32 epochs <- 10 guild_run(\"train.R\", \"--help-op\") ## Usage: guild run [OPTIONS] train.R [FLAG]... ## ## Use 'guild run --help' for a list of options. ## ## Flags: ##   batch_size     (default is 32.0) ##   epochs         (default is 10.0) ##   learning_rate  (default is 0.001) ##   units          (default is 64.0) guild_run(\"train.R\", flags = list(   learning_rate = 0.001,   units = 256 )) for (learning_rate in c(0.001, 0.0003))   guild_run(\"train.R\", c(learning_rate = learning_rate)) guild_run(\"train.R\",           flags = list(learning_rate = c(0.001, 0.003),                        units = c(128, 256))) flags_df <- expand.grid(learning_rate = c(0.001, 0.003),                         units = c(128, 256)) flags_df ##   learning_rate units ## 1         0.001   128 ## 2         0.003   128 ## 3         0.001   256 ## 4         0.003   256 guild_run(\"train.R\", flags = flags_df)"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"flag-annotations","dir":"","previous_headings":"Flags","what":"Flag annotations","title":"R interface to guildai","text":"can optionally supply additional metadata individual flags placing hashpipe yaml annotations flag expression. example, can update “train.R” script following lines: Now, flag descriptions constraints appear --help-op related locations.","code":"#| description: size of first layer. #| min: 16 #| max: 256 units <- 32  #| description: Activation function to use. #| choices: [relu, sigmoid, tanh] activation <- \"relu\""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"flag-destinations","dir":"","previous_headings":"Flags","what":"Flag destinations","title":"R interface to guildai","text":"project grows, can helpful able move flag definitions main R script. , can include flags-dest frontmatter R script, specifying file guild read update flag values. can read flag values main R script using source() similar. YAML files also supported flags destination:","code":"#| flags-dest: ./flags.R  FLAGS <- envir::include(\"flags.R\", new.env()) #| flags-dest: ./flags.yml  FLAGS <- yaml::read_yaml(\"flags.yml\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"retreiving-run-flags","dir":"","previous_headings":"Flags","what":"Retreiving Run Flags","title":"R interface to guildai","text":"flags flag values associated runs returned ls_runs() packed dataframe flags name.","code":"runs <- ls_runs() runs %>%   select(id, flags) ## # A tibble: 2 × 2 ##   id                               flags$batch_size $epochs $learning_r…¹ $units ##   <chr>                                       <dbl>   <dbl>         <dbl>  <dbl> ## 1 ed45a09d083b4fd0a61c9fb2b4556226               32      20         0.003    128 ## 2 d38c0b8580a24205b109292b4b9255f6               32      10         0.001     64 ## # … with abbreviated variable name ¹​$learning_rate"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"scalars","dir":"","previous_headings":"","what":"Scalars","title":"R interface to guildai","text":"counterpart run flags run scalars. Whereas flags special type run input guild can help manage, scalars special type run output guild can help manage. see guild automatically identified test_accuracy test_loss run scalar outputs. default, lines printed standard output run pattern \"key: <numeric-value>\" recorded guild scalars. printing values scalar key multiple times run (e.g, loss training loop), sure also print step scalar , enable guild track history (enable visualization run metrics Guild View TensorBoard). run process produces tfevent records (e.g., keras::callback_tensorboard()), also automatically identified guild run scalars, included ls_runs() (guild_view(), TensorBoard run views). ls_runs() returns last observed value run scalar key, full history scalars observed runs can also accessed R directly:","code":"runs %>%   select(id, scalars) ## # A tibble: 2 × 2 ##   id                               scalars$test_accuracy $test_loss ##   <chr>                                            <dbl>      <dbl> ## 1 ed45a09d083b4fd0a61c9fb2b4556226                 0.873      0.443 ## 2 d38c0b8580a24205b109292b4b9255f6                 0.876      0.359  glimpse(runs$scalars[[1]]) ##  num [1:2] 0.873 0.876 ls_scalars() ## # A tibble: 4 × 5 ##   run                              path  tag           value  step ##   <chr>                            <chr> <chr>         <dbl> <dbl> ## 1 ed45a09d083b4fd0a61c9fb2b4556226 <NA>  test_loss     0.443     0 ## 2 ed45a09d083b4fd0a61c9fb2b4556226 <NA>  test_accuracy 0.873     0 ## 3 d38c0b8580a24205b109292b4b9255f6 <NA>  test_loss     0.359     0 ## 4 d38c0b8580a24205b109292b4b9255f6 <NA>  test_accuracy 0.876     0"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"managing-runs","dir":"","previous_headings":"","what":"Managing runs","title":"R interface to guildai","text":"Guild comes family functions managing runs. Annotate runs: runs_comment(), runs_mark() runs_tag(). Move, archive, copy runs: runs_export() runs_import(). Delete runs: runs_delete() runs_purge() runs_restore(). runs_* family functions take runs first argument, can composed %>% ls_runs() ls_scalars(). example: runs arguments can supplied data frame, returned ls_runs() ls_scalars(), like example . runs can also character vector, flexible syntax supported specifying runs selections: example, runs can id, integer (n-th last run), combination filter specifications like --running --started 'last hour'. See resolve_run_ids(\"--help\") details.","code":"library(dplyr)  best <- ls_scalars() %>%   filter(tag == \"test_accuracy\") %>%   slice_max(value)  best ## # A tibble: 1 × 5 ##   run                              path  tag           value  step ##   <chr>                            <chr> <chr>         <dbl> <dbl> ## 1 d38c0b8580a24205b109292b4b9255f6 <NA>  test_accuracy 0.876     0  best %>%   runs_tag(\"best\") %>%   runs_export(\"./best-runs\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"supplying-guild-options","dir":"","previous_headings":"","what":"Supplying guild options","title":"R interface to guildai","text":"https://.guild.ai/t/user-config-reference/173 Guild options can supplied hashpipe yaml frontmatter script. example, can inform guild script operation store csv files project part run directory modifying front script like : comprehensive listing options can supplied guild via script frontmatter can found .","code":"#| flags-dest: ./flags.R #| sourcecode: #|   - exclude: '*.csv'"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"using-guild-from-the-terminal","dir":"","previous_headings":"","what":"Using guild from the terminal","title":"R interface to guildai","text":"guild can also used directly terminal. Call R function export_guild_cli() place guild executable installed guildai::install_guild() PATH: can launch runs perform guild operations terminal: move terminal R console, almost syntax supported terminal can used R passing strings respective R functions. default, R character vectors supplied ... throughout R functions quoted system shell passed guild. enables usage like: additional conveniences provided passing command line options R. Use () avoid quoting string shell, allowing pass multiple arguments single string. arguments take values, can pass R named arguments named objects. _ argument name converted -, -- prefix automatically added, batch_comment = \"foo\" becomes --batch_comment 'foo'. boolean values understood switches, keep_run = TRUE translated --keep-run. names vectors automatically recycled shell, tag = c(\"\", \"b\" \"c\") becomes --tag --tag b --tag c. different R expressions invoke guild identical system calls.","code":"export_guild_cli(dest = \"~/bin\") guild run train.R guild run train.R batch_size='[32,64]' guild_run(\"train.R\", \"batch_size=[32,64]\") ls_runs(marked = TRUE, started = 'last hour')  ls_runs(\"--marked\", \"--started\" = \"last hour\") ls_runs(\"--marked\", c(\"--started\", \"last hour\")) ls_runs(\"--marked\", c(\"--started\" = \"last hour\")) ls_runs(c(\"--marked\", \"--started\", \"last hour\")) ls_runs(I(\"--marked --started 'last hour'\")) ls_runs(I(\"-Fm -Fs 'last hour'\")) ls_runs(\"-Fm\", \"-Fs\" = \"last hour\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"end-to-end-example","dir":"","previous_headings":"","what":"End to End Example","title":"R interface to guildai","text":"tie things together, ’ll use guild explore impact units test_accuracy training script. can see compare run flags run scalars R:","code":"units <- (2 ^ (4:11)) %>% c(diff(., 2)) %>% sort() units ##  [1]   16   32   48   64   96  128  192  256  384  512  768 1024 1536 2048 guildai::guild_run(\"train.R\",                    flags = list(units = units)) runs <- ls_runs(seq_along(units))  df <- runs %>%   select(flags, scalars)  df ## # A tibble: 14 × 2 ##    flags$batch_size $epochs $learning_rate $units scalars$test_accuracy $test_…¹ ##               <dbl>   <dbl>          <dbl>  <dbl>                 <dbl>    <dbl> ##  1               32      10          0.001   2048                 0.876    0.370 ##  2               32      10          0.001   1536                 0.882    0.343 ##  3               32      10          0.001   1024                 0.883    0.340 ##  4               32      10          0.001    768                 0.880    0.367 ##  5               32      10          0.001    512                 0.877    0.377 ##  6               32      10          0.001    384                 0.876    0.364 ##  7               32      10          0.001    256                 0.877    0.356 ##  8               32      10          0.001    192                 0.877    0.348 ##  9               32      10          0.001    128                 0.882    0.346 ## 10               32      10          0.001     96                 0.874    0.356 ## 11               32      10          0.001     64                 0.879    0.345 ## 12               32      10          0.001     48                 0.875    0.363 ## 13               32      10          0.001     32                 0.858    0.398 ## 14               32      10          0.001     16                 0.861    0.399 ## # … with abbreviated variable name ¹​$test_loss library(ggplot2) ggplot(df, aes(x = flags$units, y = scalars$test_accuracy)) +   geom_point() + geom_smooth()"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"addin","dir":"","previous_headings":"End to End Example","what":"Addin","title":"R interface to guildai","text":"guildai package installs RStudio IDE addin provides quick access frequently used functions Addins menu: Note can use Tools -> Modify Keyboard Shortcuts within RStudio assign keyboard shortcut one addin commands.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"background-training","dir":"","previous_headings":"End to End Example","what":"Background Training","title":"R interface to guildai","text":"Since training runs can become quite lengthy, ’s often useful run background order keep R console free work. can launch guild run without blocking R console specifying guild_run(background = TRUE) call. can view real-time outputs run(s) using guild_view(). Alternatively, can launch training runs terminal pane: running within RStudio can course use system terminal window background training.","code":"Rscript -e 'guildai::guild_run(\"train.R\")'"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/export_guild_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Export guild for usage in the Terminal — export_guild_cli","title":"Export guild for usage in the Terminal — export_guild_cli","text":"Export guild usage Terminal","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/export_guild_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export guild for usage in the Terminal — export_guild_cli","text":"","code":"export_guild_cli(dest = \"~/bin\", completions = TRUE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/export_guild_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export guild for usage in the Terminal — export_guild_cli","text":"dest place guild executable. location PATH. completions Whether also install shell completion helpers.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/export_guild_cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export guild for usage in the Terminal — export_guild_cli","text":"path guild executable, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy run files into the current project working directory — guild_merge","title":"Copy run files into the current project working directory — guild_merge","text":"Copy run files current project working directory","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy run files into the current project working directory — guild_merge","text":"","code":"guild_merge(run = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy run files into the current project working directory — guild_merge","text":"run run selection ... passed guild","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy run files into the current project working directory — guild_merge","text":"","code":"if(FALSE) { guild_merge(\"--help\") ls_scalars() %>%   dplyr::slice_max(\"epoch_acc\") %>%   guild_merge(I(\"--yes --replace\")) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a guild run — guild_run","title":"Launch a guild run — guild_run","text":"Launch guild run","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a guild run — guild_run","text":"","code":"guild_run(   opspec = \"train.R\",   flags = NULL,   ...,   wait = TRUE,   background = !wait,   echo = TRUE )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a guild run — guild_run","text":"opspec typically path R script, scalar string guild recognizes valid opspec. flags named list vector like c(noise = .3, dropout = .4) scalar string like \"noise=.3 dropout=.4\" dataframe flags batch runs ... Arguments passed base::system2 command system command invoked, character string. args character vector arguments command. stdout,stderr output stdout     stderr sent.  Possible values \"\", R     console (default), NULL FALSE (discard output),     TRUE (capture output character vector)     character string naming file. stdin input diverted?  \"\" means default,     alternatively character string naming file.  Ignored     input supplied. input character vector supplied, copied one     string per line temporary file, standard input     command redirected file. env character vector name=value strings set environment     variables. timeout timeout seconds, ignored 0.  limit     elapsed time running command separate process.   Fractions     seconds ignored. minimized,invisible arguments accepted Windows     ignored platform, warning. background, wait whether run background. TRUE, guild_run() returns immediately. echo whether output run shown current R console. Note, effect whether expressions echoed guild run stdout log. disable echoing expression run logs, specify #| echo: false run script frontmatter.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch a guild run — guild_run","text":"return value system2(), invisibly. function primarily called side effect.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch Guild Viewer — guild_view","title":"Launch Guild Viewer — guild_view","text":"Launch Guild Viewer","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch Guild Viewer — guild_view","text":"","code":"guild_view(runs = NULL, ..., wait = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch Guild Viewer — guild_view","text":"runs optional runs selection. ... passed guild executable. Pass --help see options. wait whether block R console application active.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch Guild Viewer — guild_view","text":"","code":"if(FALSE) {   guild_view()    # see all supported options   guild_view(\"--help\")    # three valid ways of supplying args to the guild executable   guild_view(\"--port\" = \"5678\")   guild_view(\"--port\", \"5678\")   guild_view(c(\"--port\", \"5678\")) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":null,"dir":"Reference","previous_headings":"","what":"Install guildai core — install_guild","title":"Install guildai core — install_guild","text":"installs guild executable use package.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install guildai core — install_guild","text":"","code":"install_guild(   guildai = \"https://api.github.com/repos/guildai/guildai/tarball/HEAD\",   python = find_python() )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install guildai core — install_guild","text":"guildai character vector passed directly pip install. install release version guildai, can \"guildai\". python path python binary, used create private venv.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install guildai core — install_guild","text":"path guild binary","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install guildai core — install_guild","text":"","code":"# install_guild(c(\"-e\", \"~/guild/guildai\")) # install_guild(\"~/guildai\", reticulate::install_python()) # install_guild(\"https://api.github.com/repos/guildai/guildai/tarball/HEAD\") # install_guild( #   guildai = \"https://api.github.com/repos/guildai/guildai/tarball/HEAD\", #   python = reticulate::install_python()) #"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/is_run_active.html","id":null,"dir":"Reference","previous_headings":"","what":"Is code executing in the context of a guild run? — is_run_active","title":"Is code executing in the context of a guild run? — is_run_active","text":"code executing context guild run?","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/is_run_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is code executing in the context of a guild run? — is_run_active","text":"","code":"is_run_active()"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/is_run_active.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is code executing in the context of a guild run? — is_run_active","text":"Boolean","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"list guild runs — ls_runs","title":"list guild runs — ls_runs","text":"list guild runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list guild runs — ls_runs","text":"","code":"ls_runs(runs = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list guild runs — ls_runs","text":"runs runs specification. ... additional arguments passed guild api runs. Try \"--help\" see options.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list guild runs — ls_runs","text":"dataframe runs","code":""},{"path":[]},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get full set of runs scalars — ls_scalars","title":"Get full set of runs scalars — ls_scalars","text":"Get full set runs scalars","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get full set of runs scalars — ls_scalars","text":"","code":"ls_scalars(runs = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get full set of runs scalars — ls_scalars","text":"runs runs selection ... passed go guild","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get full set of runs scalars — ls_scalars","text":"tibble runs scalars","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get full set of runs scalars — ls_scalars","text":"","code":"if (FALSE) { ls_scalars(1) # scalars from most recent run ls_scalars(1:2) # scalars form two most recent runs  # pass in a dataframe of runs ls_runs() %>%   filter(flags$epochs > 5) %>%   ls_scalars() }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve run ids — resolve_run_ids","title":"Resolve run ids — resolve_run_ids","text":"guild supports rich syntax runs selection throughout api. selection syntax shared ls_* runs_* families functions: ls_runs(), ls_scalars(), runs_comment(), runs_label(), runs_mark(), runs_tag() runs_delete(),runs_purge(), runs_restore(), runs_export(), runs_import().","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve run ids — resolve_run_ids","text":"","code":"resolve_run_ids(runs = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve run ids — resolve_run_ids","text":"runs runs selection. data.frame, columns id run used run id. Otherwise, argument coerced character vector, passed guild runs filter selection. Wrap string () avoid quoting argument shell. ... arguments passed guild","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve run ids — resolve_run_ids","text":"character vector run ids.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve run ids — resolve_run_ids","text":"","code":"if(FALSE) { resolve_run_ids() # returns all run ids. resolve_run_ids(1) # last run resolve_run_ids(1:2) # last 2 runs resolve_run_ids(1:2, \"--operation\" = \"train.py\")  # three ways of getting ids for the currently staged or running runs resolve_run_ids(\"--staged\", \"--running\") resolve_run_ids(c(\"--staged\", \"--running\")) resolve_run_ids(I(\"--staged --running\"))  # resolve_run_ids() uses the same selection rules and syntax as ls_runs() stopifnot(identical(   resolve_run_ids(1),   ls_runs(1)$id )) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete runs — runs_delete","title":"Delete runs — runs_delete","text":"Delete runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete runs — runs_delete","text":"","code":"runs_delete(runs = NULL, ...)  runs_purge(runs = NULL, ...)  runs_restore(runs = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete runs — runs_delete","text":"runs runs selection ... passed guild()","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete runs — runs_delete","text":"runs_delete() moves runs guild managed \"trash\" directory. runs_restore() moves runs back main guild managed \"runs\" directory. runs_purge() permanently delete runs \"trash\" directory. deleted runs can purged.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Delete runs — runs_delete","text":"see deleted runs, guildai:::guild(\"runs list --deleted\") (ls_runs(\"--deleted\") supported soon)","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Move or copy runs — runs_export","title":"Move or copy runs — runs_export","text":"Move copy runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move or copy runs — runs_export","text":"","code":"runs_export(runs = NULL, location, ..., move = FALSE, copy_resources = FALSE)  runs_import(runs = NULL, location, ..., move = FALSE, copy_resources = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move or copy runs — runs_export","text":"runs runs selection location directory place runs, find runs. ... passed guild move bool, whether runs moved copied import export operation. copy_resources whether run resources also copied. FALSE, (default), run resources run directory symlinks guild managed storage location.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move or copy runs — runs_export","text":"NULL, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate runs — runs_label","title":"Annotate runs — runs_label","text":"Annotate runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate runs — runs_label","text":"","code":"runs_label(runs = NULL, label = NULL, ..., clear = FALSE)  runs_tag(runs = NULL, add = NULL, ..., remove = NULL, clear = FALSE)  runs_mark(runs = NULL, ..., clear = FALSE)  runs_comment(runs = NULL, comment = NULL, ..., delete = NULL, clear = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate runs — runs_label","text":"runs runs selection label, comment string ... passed guild clear bool, whether clear existing tags/comments/label. add, remove character vector tags add remove delete integer vector, comment(s) delete, corresponding row number(s) dataframe found ls_runs()$comments.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Annotate runs — runs_label","text":"runs_comment() open editor comment supplied.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate runs — runs_label","text":"","code":"if(FALSE) {  ls_runs(1) %>% runs_tag(clear = TRUE) ls_runs(1) %>% runs_tag(\"foo\") ls_runs(1)$tags ls_runs(1) %>% runs_tag(\"bar\") ls_runs(1)$tags ls_runs(1) %>% runs_tag(remove = \"foo\") ls_runs(1)$tags ls_runs(1) %>% runs_tag(\"baz\", clear = TRUE) ls_runs(1)$tags  ## pass through options to `guild tag` cli subcommand runs_tag(NULL, NULL, \"--help\") ls_runs(1) %>% runs_tag(\"--add\" = c(\"foo\", \"bar\")) ls_runs(1) %>% runs_tag(\"--add\" = \"baz\", \"--delete\" = \"bar\") ls_runs(1)$tags  }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Run Summary Report — view_run_report","title":"Render a Run Summary Report — view_run_report","text":"Render Run Summary Report","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Run Summary Report — view_run_report","text":"","code":"view_run_report(   run = \"1\",   output_dir = file.path(tempdir(), id),   template = system.file(\"templates/view-run.qmd\", package = \"guildai\"),   viewer = getOption(\"guildai.viewer\"),   ... )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Run Summary Report — view_run_report","text":"run run selection. Defaults latest run. output_dir directory place rendered document. template path parameterized quarto document. viewer Viewer display training run information within (default internal page viewer available, otherwise R session default web browser, utils::browseURL()). ... passed quarto::quarto_render()","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Run Summary Report — view_run_report","text":"path generated html, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"compare runs — view_runs_diff","title":"compare runs — view_runs_diff","text":"compare runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare runs — view_runs_diff","text":"","code":"view_runs_diff(   runs = \"1:2\",   output_dir = file.path(tempdir(), paste(ids, collapse = \"-\")),   template = system.file(\"templates/compare-runs.qmd\", package = \"guildai\"),   viewer = getOption(\"guildai.viewer\"),   ... )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare runs — view_runs_diff","text":"runs runs selection two runs. Defaults latest two runs. output_dir place rendered html template Report template viewer Viewer display training run information within (default internal page viewer available, otherwise R session default web browser, utils::browseURL()). ... passed quarto::quarto_render()","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare runs — view_runs_diff","text":"path generated html, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Write run attributes — write_run_attr","title":"Write run attributes — write_run_attr","text":"function nothing is_run_active() FALSE.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write run attributes — write_run_attr","text":"","code":"write_run_attr(name, data)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write run attributes — write_run_attr","text":"name string data data write. needs encodable yaml. Passing NULL delete existing attr.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write run attributes — write_run_attr","text":"written yaml, invisibly.","code":""}]
