[{"path":"https://t-kalinowski.github.io/guildai-r/articles/examples/keras.html","id":"example_keras","dir":"Articles > Examples","previous_headings":"","what":"example_keras","title":"","text":"example showing use guildai TensorFlow Keras R. first exposure guildai, recommend starting framework agnostic “Getting Started” guide. example assumes familiarity guild concepts like flags scalars. ’ll start example R script, named “train.R”, trains, evaluates, saves Keras model using fashion mnist dataset. looks like: things note script: ‘guildai’ specific configuration anywhere script. ’s regular R script, normally source(). Flags like batch_size, epochs, units can defined anywhere script. take advantage defining flags close point use. callback_tensorboard() list callbacks provided fit() call result tfevent records written training. Guild automatically parse logs scalars. addition tensorboard logs, also directly printing two scalars named test_loss test_accuracy stdout. end run, save model training history. file artifacts stored part run, enabling us restore trained model. script defined, can launch guild run: Inspecting run flags scalars: runs_info() returns last value scalar. full history scalars emitted available runs_scalars(). can plot scalars vs step full training history:  can compare history object fit() saved run. indeed .  Finally, can load model trained run accessing saved files directly.","code":"library(tensorflow) library(keras) use_virtualenv(\"r-tensorflow\")   # Prepare data --------------------------------------------------------  fashion_mnist <- dataset_fashion_mnist()  c(train_images, train_labels) %<-% fashion_mnist$train c(test_images, test_labels) %<-% fashion_mnist$test  train_images <- train_images / 255 test_images <- test_images / 255  # Define model --------------------------------------------------------  units <- 64  model <-   keras_model_sequential(input_shape = c(28, 28)) %>%   layer_flatten() %>%   layer_dense(units = units, activation = 'relu') %>%   layer_dense(units = 10, activation = 'softmax')  learning_rate <- 0.001  model %>% compile(   optimizer = optimizer_adam(learning_rate),   loss = 'sparse_categorical_crossentropy',   metrics = c('accuracy') )  model  # Fit model -----------------------------------------------------------  batch_size <- 32 epochs <- 10  history <- model %>%   fit(train_images, train_labels,       validation_split = 0.2,       batch_size = batch_size,       epochs = epochs,       callbacks = list(callback_tensorboard()),       verbose = 2)  plot(history)  # Evaluate model ------------------------------------------------------  score <- model %>%   evaluate(test_images, test_labels,            verbose = 0) %>%   as.list()  cat('test_loss:', score$loss, \"\\n\") cat('test_accuracy:', score$accuracy, \"\\n\")   # Save model ----------------------------------------------------------  save_model_tf(model, \"model.keras\") saveRDS(history, \"history.rds\") library(guildai) guild_run(\"train-keras.R\") ## > library(tensorflow) ## > library(keras) ## > use_virtualenv(\"r-tensorflow\") ## > # Prepare data -------------------------------------------------------- ## >  ## > fashion_mnist <- dataset_fashion_mnist() ## > c(train_images, train_labels) %<-% fashion_mnist$train ## > c(test_images, test_labels) %<-% fashion_mnist$test ## > train_images <- train_images / 255 ## > test_images <- test_images / 255 ## > # Define model -------------------------------------------------------- ## >  ## > units <- 64 ## > model <- ## +   keras_model_sequential(input_shape = c(28, 28)) %>% ## +   layer_flatten() %>% ## +   layer_dense(units = units, activation = 'relu') %>% ## +   layer_dense(units = 10, activation = 'softmax') ## > learning_rate <- 0.001 ## > model %>% compile( ## +   optimizer = optimizer_adam(learning_rate), ## +   loss = 'sparse_categorical_crossentropy', ## +   metrics = c('accuracy') ## + ) ## > model ## Model: \"sequential\" ## ________________________________________________________________________________ ##  Layer (type)                       Output Shape                    Param #      ## ================================================================================ ##  flatten (Flatten)                  (None, 784)                     0            ##  dense_1 (Dense)                    (None, 64)                      50240        ##  dense (Dense)                      (None, 10)                      650          ## ================================================================================ ## Total params: 50,890 ## Trainable params: 50,890 ## Non-trainable params: 0 ## ________________________________________________________________________________ ## > # Fit model ----------------------------------------------------------- ## >  ## > batch_size <- 32 ## > epochs <- 10 ## > history <- model %>% ## +   fit(train_images, train_labels, ## +       validation_split = 0.2, ## +       batch_size = batch_size, ## +       epochs = epochs, ## +       callbacks = list(callback_tensorboard()), ## +       verbose = 2) ## Epoch 1/10 ## WARNING:tensorflow:Callback method `on_train_batch_end` is slow compared to the batch time (batch time: 0.0024s vs `on_train_batch_end` time: 0.0044s). Check your callbacks. ## 1500/1500 - 5s - loss: 0.5415 - accuracy: 0.8112 - val_loss: 0.4634 - val_accuracy: 0.8332 - 5s/epoch - 3ms/step ## Epoch 2/10 ## 1500/1500 - 3s - loss: 0.4054 - accuracy: 0.8564 - val_loss: 0.3880 - val_accuracy: 0.8604 - 3s/epoch - 2ms/step ## Epoch 3/10 ## 1500/1500 - 3s - loss: 0.3644 - accuracy: 0.8692 - val_loss: 0.3783 - val_accuracy: 0.8632 - 3s/epoch - 2ms/step ## Epoch 4/10 ## 1500/1500 - 3s - loss: 0.3390 - accuracy: 0.8775 - val_loss: 0.3675 - val_accuracy: 0.8683 - 3s/epoch - 2ms/step ## Epoch 5/10 ## 1500/1500 - 2s - loss: 0.3209 - accuracy: 0.8830 - val_loss: 0.3457 - val_accuracy: 0.8753 - 2s/epoch - 2ms/step ## Epoch 6/10 ## 1500/1500 - 2s - loss: 0.3033 - accuracy: 0.8890 - val_loss: 0.3347 - val_accuracy: 0.8819 - 2s/epoch - 2ms/step ## Epoch 7/10 ## 1500/1500 - 3s - loss: 0.2937 - accuracy: 0.8917 - val_loss: 0.3313 - val_accuracy: 0.8819 - 3s/epoch - 2ms/step ## Epoch 8/10 ## 1500/1500 - 3s - loss: 0.2817 - accuracy: 0.8964 - val_loss: 0.3273 - val_accuracy: 0.8828 - 3s/epoch - 2ms/step ## Epoch 9/10 ## 1500/1500 - 3s - loss: 0.2707 - accuracy: 0.9000 - val_loss: 0.3288 - val_accuracy: 0.8842 - 3s/epoch - 2ms/step ## Epoch 10/10 ## 1500/1500 - 2s - loss: 0.2651 - accuracy: 0.9019 - val_loss: 0.3378 - val_accuracy: 0.8788 - 2s/epoch - 2ms/step ## > plot(history) ## > # Evaluate model ------------------------------------------------------ ## >  ## > score <- model %>% ## +   evaluate(test_images, test_labels, ## +            verbose = 0) %>% ## +   as.list() ## > cat('test_loss:', score$loss, \"\\n\") ## test_loss: 0.370381832122803  ## > cat('test_accuracy:', score$accuracy, \"\\n\") ## test_accuracy: 0.868600010871887  ## > # Save model ---------------------------------------------------------- ## >  ## > save_model_tf(model, \"model.keras\") ## > saveRDS(history, \"history.rds\") run <- runs_info(1) str(run$flags) ## tibble [1 × 4] (S3: tbl_df/tbl/data.frame) ##  $ batch_size   : num 32 ##  $ epochs       : num 10 ##  $ learning_rate: num 0.001 ##  $ units        : num 64 str(run$scalars) ## tibble [1 × 4] (S3: tbl_df/tbl/data.frame) ##  $ test_accuracy: num 0.869 ##  $ test_loss    : num 0.37 ##  $ train        : tibble [1 × 2] (S3: tbl_df/tbl/data.frame) ##   ..$ epoch_accuracy: num 0.902 ##   ..$ epoch_loss    : num 0.265 ##  $ validation   : tibble [1 × 4] (S3: tbl_df/tbl/data.frame) ##   ..$ epoch_accuracy                   : num 0.879 ##   ..$ epoch_loss                       : num 0.338 ##   ..$ evaluation_accuracy_vs_iterations: num 0.869 ##   ..$ evaluation_loss_vs_iterations    : num 0.37 all_scalars <- runs_scalars(1)   all_scalars |>   dplyr::arrange(step) ## # A tibble: 64 × 5 ##    run                              path       tag            value  step ##    <chr>                            <chr>      <chr>          <dbl> <dbl> ##  1 29af1c87e5454ee3a300f2e25d827a31 <NA>       test_loss      0.370     0 ##  2 29af1c87e5454ee3a300f2e25d827a31 <NA>       test_accuracy  0.869     0 ##  3 29af1c87e5454ee3a300f2e25d827a31 validation epoch_loss     0.463     0 ##  4 29af1c87e5454ee3a300f2e25d827a31 validation epoch_accuracy 0.833     0 ##  5 29af1c87e5454ee3a300f2e25d827a31 train      epoch_loss     0.541     0 ##  6 29af1c87e5454ee3a300f2e25d827a31 train      epoch_accuracy 0.811     0 ##  7 29af1c87e5454ee3a300f2e25d827a31 validation epoch_loss     0.388     1 ##  8 29af1c87e5454ee3a300f2e25d827a31 validation epoch_accuracy 0.860     1 ##  9 29af1c87e5454ee3a300f2e25d827a31 train      epoch_loss     0.405     1 ## 10 29af1c87e5454ee3a300f2e25d827a31 train      epoch_accuracy 0.856     1 ## # … with 54 more rows library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(ggplot2)  all_scalars %>%   filter(tag %in% c(\"epoch_accuracy\", \"epoch_loss\")) %>%    mutate(tag = forcats::fct_rev(tag)) %>%    ggplot(aes(x = step, y = value, color = path)) +    facet_grid(rows = vars(tag), switch = 'y', scales = 'free_y') +   geom_point() + geom_smooth(se = FALSE) ## `geom_smooth()` using method = 'loess' and formula = 'y ~ x' list.files(run$dir) ## [1] \"history.rds\"   \"logs\"          \"model.keras\"   \"plots\"         ## [5] \"train-keras.R\"  history <- readRDS(file.path(run$dir, \"history.rds\")) library(keras) # to load the plot.keras_training_history() method plot(history) model <- load_model_tf(file.path(run$dir, \"model.keras\")) model ## Model: \"sequential\" ## ________________________________________________________________________________ ##  Layer (type)                       Output Shape                    Param #      ## ================================================================================ ##  flatten (Flatten)                  (None, 784)                     0            ##  dense_1 (Dense)                    (None, 64)                      50240        ##  dense (Dense)                      (None, 10)                      650          ## ================================================================================ ## Total params: 50,890 ## Trainable params: 50,890 ## Non-trainable params: 0 ## ________________________________________________________________________________"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"guildai","dir":"Articles","previous_headings":"","what":"guildai","title":"","text":"guildai provides suite tools tracking, visualizing, managing machine learning experiments. guildai R package successor tfruns package. Track hyperparameters, metrics, output, source code every training run. Compare hyperparmaeters metrics across runs find best performing model. changes source code required.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"","text":"R package provides interface Guild AI Core. R package automatically download install Guild AI Core first use, can call install_guild() directly customize installation.","code":"# install.packages(\"guildai\") if(!requireNamespace(\"remotes\"))   install.packages(\"remotes\", repos = \"https://cran.rstudio.com\") remotes::install_github(\"t-kalinowski/guildai-r\") guildai::install_guild()"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"launch-a-run","dir":"Articles","previous_headings":"","what":"Launch a Run","title":"","text":"Guild AI can used machine learning framework, framework . See examples demonstrating use guild common machine learning frameworks, including xgboost, tensorFlow keras, torch, tidymodels. introductory example, ’ll start showing guild framework , simple (somewhat contrived) example. Say R script named \"train.R\" fitting smoother line, like :  train model guildai, use guild_run() function place source() function execute R script. example: launch new R process isolated run directory using provided script. default, output stream run shown R console (output stream see source(\"train.R\", echo = TRUE) R console, R --file=train.R terminal).","code":"model <- loess(dist ~ speed, data = cars)  plot(dist ~ speed, data = cars) lines(x = 3:30, y = predict(model, 3:30), col = \"blue\") library(guildai) guild_run(\"train.R\") ## > model <- loess(dist ~ speed, data = cars) ## > plot(dist ~ speed, data = cars) ## > lines(x = 3:30, y = predict(model, 3:30), col = \"blue\")"},{"path":[]},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"in-an-interactive-application","dir":"Articles","previous_headings":"View Runs","what":"In an Interactive Application","title":"","text":"Call guild_view() launch Guild View application, can use visualize manage runs. can use search, filter, visualize, compare run source code output, ! also bundles TensorBoard additional visualization tool viewing runs.","code":"guild_view()"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"in-r","dir":"Articles","previous_headings":"View Runs","what":"In R","title":"","text":"Retrieve data frame run information R using runs_info(): runs_info() returns data frame information runs, one row per run. introduction far, ’ve launched 1 run, runs_info() returns 1-row data frame. runs_info() supports rich set filter options can conveniently supplied. example: See ?runs_info() information.","code":"run <- runs_info() tibble::glimpse(run) ## Rows: 1 ## Columns: 15 ## $ label       <chr> \"\" ## $ tags        <list> <> ## $ marked      <lgl> FALSE ## $ flags       <tibble[,0]> <tbl_df[1 x 0]> ## $ scalars     <tibble[,0]> <tbl_df[1 x 0]> ## $ operation   <chr> \"train.R\" ## $ started     <dttm> 2023-01-22 18:31:51 ## $ stopped     <dttm> 2023-01-22 18:31:52 ## $ comments    <list> [<tbl_df[0 x 4]>] ## $ status      <chr> \"completed\" ## $ exit_status <int> 0 ## $ deps        <list> [] ## $ project_dir <chr> \"/tmp/RtmpObMwkC/guildai-intro-sample-project-267db1b27f98… ## $ dir         <chr> \"/tmp/RtmpObMwkC/guildai-intro-sample-project-267db1b27f9… ## $ id          <chr> \"ef4d508873c24dbaa9688f5e54a4bf56\" ls_runs(1)            # get the most recent run ls_runs(error = TRUE) # get only runs that returned an error"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"in-the-filesystem","dir":"Articles","previous_headings":"View Runs","what":"In the Filesystem","title":"","text":"guild_view() runs_info() provide two convenient ways gather present information runs. Importantly however, run directories easily accessible. ’ll find files, plots, logs, output generated run. run directory also contains additional metadata runs guild recorded “.guild” folder. ’ll find plain text (yaml) files information like starting random seed, environment variables, information package versions, metadata frequently useful reproducability.","code":"fs::dir_tree(run$dir[1], all = TRUE) ## /tmp/RtmpObMwkC/guildai-intro-sample-project-267db1b27f980/.guild/runs/ef4d508873c24dbaa9688f5e54a4bf56 ## ├── .guild ## │   ├── attrs ## │   │   ├── cmd ## │   │   ├── deps ## │   │   ├── env ## │   │   ├── exit_status ## │   │   ├── flags ## │   │   ├── host ## │   │   ├── id ## │   │   ├── initialized ## │   │   ├── op ## │   │   ├── platform ## │   │   ├── plugins ## │   │   ├── r_packages_loaded ## │   │   ├── random_seed ## │   │   ├── run_params ## │   │   ├── sourcecode_digest ## │   │   ├── started ## │   │   ├── stopped ## │   │   ├── user ## │   │   └── user_flags ## │   ├── manifest ## │   ├── opref ## │   ├── output ## │   └── output.index ## ├── plots ## │   └── Rplot001.png ## └── train.R"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"flags","dir":"Articles","previous_headings":"","what":"Flags","title":"","text":"Flags form run inputs, paramaterization. guild_run() can modify flags launching runs, guild_view() runs_info() make easy compare flags across runs. scalar literal assigned top level run script automatically identified flag.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"supplying-run-flag-values","dir":"Articles","previous_headings":"Flags","what":"Supplying run flag values","title":"","text":"illustrate, ’ll modify script “train.R” adding flags span family, pass arguments loess() smoother: can launch run different flag values like : guild_run() modify script file requested flag values starting run, modified manually. change persistent, visible inspecting snapshot run sources captured, e.g., guild_view() (guild diff, inspecting filesystem). flags interface useful experimentation hyperparamater optimization. ’s simplest, can iterate set flag values want pass separate calls guild_run(): can also pass multiple values flag, guild automatically expand combinations grid. example, launch 4 training runs, unique pairing flags. Another way launch batch runs pass data frame flags values, row corresponding run.","code":"span <- .75 family <- \"gaussian\"  model <- loess(dist ~ speed, data = cars,                span = span, family = family)  plot(dist ~ speed, data = cars) lines(x = 3:30, y = predict(model, 3:30), col = \"blue\") guild_run(\"train.R\", flags = list(   span = 1.5,   family = \"symmetric\" )) for (span in c(0.5, 0.75, 1, 1.25))   guild_run(\"train.R\", list(span = span)) guild_run(\"train.R\", flags = list(   span = c(0.5, 0.75),   family = c(\"gaussian\", \"symmetric\") )) flags_df <- expand.grid(span = c(0.5, 0.75),                         family = c(\"gaussian\", \"symmetric\")) flags_df ##   span    family ## 1 0.50  gaussian ## 2 0.75  gaussian ## 3 0.50 symmetric ## 4 0.75 symmetric guild_run(\"train.R\", flags = flags_df, echo = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"retreiving-run-flags","dir":"Articles","previous_headings":"Flags","what":"Retreiving run flags","title":"","text":"flags flag values associated runs returned runs_info() packed dataframe flags name.","code":"runs <- runs_info(1:4) # retrieve the last 4 runs runs$flags ## # A tibble: 4 × 2 ##   family     span ##   <chr>     <dbl> ## 1 symmetric  0.75 ## 2 symmetric  0.5  ## 3 gaussian   0.75 ## 4 gaussian   0.5"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"scalars","dir":"Articles","previous_headings":"","what":"Scalars","title":"","text":"counterpart run flags run scalars. Whereas flags special type run input guild can help manage, scalars special type run output guild can help manage. lines printed stdout matching pattern identified scalar: illustrate, “train.R” updated output two scalars, rmse mse. script run, two lines printed output identified guild scalars: can retrieve scalar results runs runs_info(): see guild automatically identified rmse mse scalars. printing values scalar key multiple times run (e.g, loss training loop), sure also print step scalar , enable guild track history (enable visualization run metrics Guild View TensorBoard). runs_info() returns last observed value run scalar key, full history scalars observed runs can also accessed R directly via runs_scalars(). run produces tfevent records run directory (e.g., via keras::callback_tensorboard() tfevents::log_event()), also automatically identified guild run scalars, included runs_info() (guild_view(), TensorBoard run views).","code":"key: <numeric> span <- .75 family <- \"gaussian\"  model <- loess(dist ~ speed, data = cars,                span = span, family = family)  plot(dist ~ speed, data = cars) lines(x = 3:30, y = predict(model, 3:30), col = \"blue\")  mse <- mean(residuals(model)^2) rmse <- sqrt(mse)  cat(\"mse:\", mse, \"\\n\") cat(\"rmse:\", rmse, \"\\n\") guild_run(\"train.R\") ## > span <- .75 ## > family <- \"gaussian\" ## > model <- loess(dist ~ speed, data = cars, ## +                span = span, family = family) ## > plot(dist ~ speed, data = cars) ## > lines(x = 3:30, y = predict(model, 3:30), col = \"blue\") ## > mse <- mean(residuals(model)^2) ## > rmse <- sqrt(mse) ## > cat(\"mse:\", mse, \"\\n\") ## mse: 207.274320377417  ## > cat(\"rmse:\", rmse, \"\\n\") ## rmse: 14.3970247057306 mse: 207.274320377417 rmse: 14.3970247057306 runs_info(1)$scalars ## # A tibble: 1 × 2 ##     mse  rmse ##   <dbl> <dbl> ## 1  207.  14.4"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"guild-configuration","dir":"Articles","previous_headings":"","what":"Guild Configuration","title":"","text":"Guild accepts variety operation configuration options. One convenient way supplying configuration options via hashpipe yaml (#|) comments R script. Hashpipe comments always parsed yaml (yaml superset json, json also valid).","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"operation-configuration","dir":"Articles","previous_headings":"Guild Configuration","what":"Operation configuration","title":"","text":"Guild options can supplied hashpipe yaml frontmatter script (lines 1-n). example, can inform guild guild echo R expressions stdout log supplying echo: like . comprehensive listing operation configuration options can supplied guild via script frontmatter can found .","code":"#| echo: no  model <- loess(dist ~ speed, data = cars,                span = span, family = family)"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"flag-configuration","dir":"Articles","previous_headings":"Guild Configuration","what":"Flag configuration","title":"","text":"can optionally supply additional metadata individual flags placing hashpipe yaml annotations flag expression.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"flag-constraints","dir":"Articles","previous_headings":"Guild Configuration > Flag configuration","what":"Flag constraints","title":"","text":"example, can update “train.R” script add constraints span family flags. span ’ll set range valid values 0.3–3.0. family ’ll define set two valid string values family can take, \"gaussian\" \"symmetric\". Now attempt launch run flag value ’s outside constraints defined, guild throw error:","code":"#| echo: no  #| {min: .3, max: 3} span <- .75  #| choices: [gaussian, symmetric] family <- \"gaussian\"  model <- loess(dist ~ speed, data = cars,                span = span, family = family)  plot(dist ~ speed, data = cars) lines(x = 3:30, y = predict(model, 3:30), col = \"blue\")  rmse <- sqrt(mean(residuals(model)^2)) cat(\"rmse:\", rmse, \"\\n\") guild_run(\"trian.R\", flags = list(span = 99)) # error"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"flag-destinations","dir":"Articles","previous_headings":"Guild Configuration > Flag configuration","what":"Flag destinations","title":"","text":"project grows, can helpful able move flag definitions main R script. , can include flags-dest frontmatter R script, specifying file guild read update flag values. can read flag values main R script using source() similar. YAML files also supported flags destination:","code":"#| flags-dest: ./flags.R  FLAGS <- envir::include(\"flags.R\", new.env())  model <- loess(dist ~ speed, data = cars,                span = FLAGS$span,                family = FLAGS$family) #| flags-dest: ./flags.yml  FLAGS <- yaml::read_yaml(\"flags.yml\")  model <- loess(dist ~ speed, data = cars,                span = FLAGS$span,                family = FLAGS$family)"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"hyperparameter-optimization","dir":"Articles","previous_headings":"","what":"Hyperparameter Optimization","title":"","text":"combination flags constraints scalars make possible use hyperparamater optimizer guild. , flags hyperamaters, flag constraints define hyperparameter search space, scalar objective minimize maximize. illustrate, example run R script: can use optimizer operation like : can launch optimizer multiple times, automatically pick left , using results previous runs select flag values next run.","code":"#| echo: no  #| {min: .3, max: 3} span <- .75  #| choices: [gaussian, symmetric] family <- \"gaussian\"  model <- loess(dist ~ speed, data = cars,                span = span, family = family)  plot(dist ~ speed, data = cars) lines(x = 3:30, y = predict(model, 3:30), col = \"blue\")  rmse <- sqrt(mean(residuals(model)^2)) cat(\"rmse:\", rmse, \"\\n\") guild_run(\"train.R\",           optimizer = \"bayesian\",           minimize = \"rmse\",           max_trials = 5) ## INFO: [guild] Random start for optimization (1 of 3) ## INFO: [guild] Running trial 1362c9c1b2de4aaa885a3e8847ae5104: train.R (family=gaussian, span=0.75) ## rmse: 14.3970247057306  ## INFO: [guild] Random start for optimization (2 of 3) ## INFO: [guild] Running trial b4aeb632fe4140f0a4017daa5dd51233: train.R (family=gaussian, span=2.8902713411966174) ## rmse: 14.6917177224245  ## INFO: [guild] Random start for optimization (3 of 3) ## INFO: [guild] Running trial 5d0eea2717a84e1e98ff692c6f6d8ed2: train.R (family=symmetric, span=1.8048455059911397) ## rmse: 15.0075159560132  ## INFO: [guild] Found 3 previous trial(s) for use in optimization ## INFO: [guild] Running trial 067e6177e7c943728a35bc11da8c30c1: train.R (family=gaussian, span=0.3) ## rmse: 12.3620973783366  ## INFO: [guild] Found 4 previous trial(s) for use in optimization ## INFO: [guild] Running trial 1e9f0284d37543a5a78d81954fad1c53: train.R (family=symmetric, span=0.3) ## rmse: 12.5758081076474 guild_run(\"train.R\",           optimizer = \"bayesian\",           minimize = \"rmse\",           max_trials = 5) ## INFO: [guild] Random start for optimization (1 of 3) ## INFO: [guild] Running trial b86bab56e0cf4c1ea774df5bf45e8e25: train.R (family=gaussian, span=0.75) ## rmse: 14.3970247057306  ## INFO: [guild] Random start for optimization (2 of 3) ## INFO: [guild] Running trial 7187487b820e4014afdc9af5f3f24132: train.R (family=symmetric, span=2.6403597783933916) ## rmse: 15.0465495941782  ## INFO: [guild] Random start for optimization (3 of 3) ## INFO: [guild] Running trial 95ef983882c94f41844067e1fd778ed4: train.R (family=symmetric, span=0.35886498233477176) ## rmse: 12.9401892499076  ## INFO: [guild] Found 3 previous trial(s) for use in optimization ## INFO: [guild] Running trial f93de91eae5d443787b165ac82620291: train.R (family=symmetric, span=0.3) ## rmse: 12.5758081076474  ## INFO: [guild] Found 4 previous trial(s) for use in optimization ## INFO: [guild] Running trial aa27061b43c84d91805d733a95e21d0e: train.R (family=symmetric, span=0.3) ## rmse: 12.5758081076474"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"managing-runs","dir":"Articles","previous_headings":"","what":"Managing runs","title":"","text":"Guild comes family functions managing runs. Annotate runs: runs_comment(), runs_mark() runs_tag(). Move, archive, copy runs: runs_export() runs_import(). Delete runs: runs_delete() runs_purge() runs_restore(). runs_* family functions take runs first argument, can composed |>. runs arguments can supplied data frame, returned runs_info() runs_scalars(). runs can also character vector, flexible syntax supported specifying runs selections: example, runs can id, integer (n-th last run), combination filter specifications like running = TRUE started  = 'last hour'. See ?runs_info() details. illustrate, lets launch runs investigate results previous runs (including 10 hyperparameter optimization runs, well runs flag values manually launched earlier guide):","code":"guild_run(\"train.R\", echo = FALSE, flags = list(   span = seq(.3, 1.5, length.out = 5),   family = c(\"symmetric\", \"gaussian\") )) library(dplyr, warn.conflicts = FALSE) library(ggplot2)  runs <- runs_info()   runs ## # A tibble: 26 × 15 ##    label                tags  marked flags…¹ scala…² opera…³ started             ##    <chr>                <lis> <lgl>  <chr>     <dbl> <chr>   <dttm>              ##  1 family=gaussian spa… <chr> FALSE  gaussi…    14.6 train.R 2023-01-22 18:32:21 ##  2 family=gaussian spa… <chr> FALSE  gaussi…    14.6 train.R 2023-01-22 18:32:20 ##  3 family=gaussian spa… <chr> FALSE  gaussi…    14.5 train.R 2023-01-22 18:32:19 ##  4 family=gaussian spa… <chr> FALSE  gaussi…    14.2 train.R 2023-01-22 18:32:18 ##  5 family=gaussian spa… <chr> FALSE  gaussi…    12.4 train.R 2023-01-22 18:32:18 ##  6 family=symmetric sp… <chr> FALSE  symmet…    15.0 train.R 2023-01-22 18:32:16 ##  7 family=symmetric sp… <chr> FALSE  symmet…    14.9 train.R 2023-01-22 18:32:15 ##  8 family=symmetric sp… <chr> FALSE  symmet…    14.8 train.R 2023-01-22 18:32:15 ##  9 family=symmetric sp… <chr> FALSE  symmet…    14.6 train.R 2023-01-22 18:32:14 ## 10 family=symmetric sp… <chr> FALSE  symmet…    12.6 train.R 2023-01-22 18:32:13 ## # … with 16 more rows, 10 more variables: flags$span <dbl>, scalars$mse <dbl>, ## #   stopped <dttm>, comments <list>, status <chr>, exit_status <int>, ## #   deps <list>, project_dir <chr>, dir <chr>, id <chr>, and abbreviated ## #   variable names ¹​flags$family, ²​scalars$rmse, ³​operation  runs <- runs %>%   # filter out runs that didn't print 'rmse: <numeric>'    filter(!is.na(scalars$rmse)) %>%    # filter out runs where the flag `span` was over 1.5   filter(flags$span <= 1.5)  runs %>%   ggplot(aes(x = flags$span, y = scalars$rmse,              color = flags$family)) +   geom_point() + geom_smooth() best_run <- runs |>   filter(flags$family == \"gaussian\") |>   slice_max(scalars$rmse)  tibble::glimpse(best_run) ## Rows: 1 ## Columns: 15 ## $ label       <chr> \"family=gaussian span=1.5\" ## $ tags        <list> <> ## $ marked      <lgl> FALSE ## $ flags       <tibble[,2]> <tbl_df[1 x 2]> ## $ scalars     <tibble[,2]> <tbl_df[1 x 2]> ## $ operation   <chr> \"train.R\" ## $ started     <dttm> 2023-01-22 18:32:21 ## $ stopped     <dttm> 2023-01-22 18:32:21 ## $ comments    <list> [<tbl_df[0 x 4]>] ## $ status      <chr> \"completed\" ## $ exit_status <int> 0 ## $ deps        <list> [] ## $ project_dir <chr> \"/tmp/RtmpObMwkC/guildai-intro-sample-project-267db1b27f98… ## $ dir         <chr> \"/tmp/RtmpObMwkC/guildai-intro-sample-project-267db1b27f9… ## $ id          <chr> \"823bfa568a7d4d6bb5dd239f7bde3f15\"  best_run |>   runs_tag(\"best\") |>   runs_export(\"./best-runs\") ## Modified tags for 1 run(s) ## Copying 823bfa568a7d4d6bb5dd239f7bde3f15 ## Exported 1 run(s) to ./best-runs"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"using-guild-from-the-terminal","dir":"Articles","previous_headings":"Managing runs","what":"Using guild from the terminal","title":"","text":"guild can also used directly terminal. Call R function install_guild_cli() place guild executable installed guildai::install_guild() PATH: can launch runs perform guild operations terminal: move terminal R console, almost syntax supported terminal can used R passing strings respective R functions. default, R character vectors supplied ... throughout R functions quoted system shell passed guild. enables usage like: additional conveniences provided passing command line options R. Use () avoid quoting string shell, allowing pass multiple arguments single string. arguments take values, can pass R named arguments named objects. _ argument name converted -, -- prefix automatically added, batch_comment = \"foo\" becomes --batch_comment 'foo'. boolean values understood switches, running = TRUE translated --running, whilerunning = FALSE translated ---running. names vectors automatically recycled shell, tag = c(\"\", \"b\" \"c\") becomes --tag --tag b --tag c. single leading . argument name treated short option name, e.g., .Fs = \"last hour\" becomes -Fs 'last hour' Nested lists recursively flattened single character vector different R expressions invoke guild identical system calls.","code":"export_guild_cli(dest = \"~/bin\") guild run train.R guild run train.R batch_size='[32,64]' guild_run(\"train.R\", \"batch_size=[32,64]\") runs_info(marked = TRUE, started = 'last hour') runs_info(\"--marked\", \"--started\" = \"last hour\") runs_info(\"--marked\", c(\"--started\", \"last hour\")) runs_info(\"--marked\", c(\"--started\" = \"last hour\")) runs_info(c(\"--marked\", \"--started\", \"last hour\")) runs_info(I(\"--marked --started 'last hour'\")) runs_info(I(\"-Fm -Fs 'last hour'\")) runs_info(.Fm = TRUE, .Fs = 'last hour') runs_info(\"-Fm\", \"-Fs\" = \"last hour\")"},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"addin","dir":"Articles","previous_headings":"Managing runs > Using guild from the terminal","what":"Addin","title":"","text":"guildai package installs RStudio IDE addin provides quick access frequently used functions Addins menu: Note can use Tools -> Modify Keyboard Shortcuts within RStudio assign keyboard shortcut one addin commands. Specifically three addins provided: Launch guild_run() current source document. Launch guild_view(). View runs_info() interactive table viewer. ’s recomended action “Launch guild_run()” assigned keyboard shortcut Ctrl/Cmd + Alt + Enter.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"background-training","dir":"Articles","previous_headings":"Managing runs > Using guild from the terminal","what":"Background Training","title":"","text":"Since training runs can become quite lengthy, ’s often useful run background order keep R console free work. RStudio IDE, guild_run() automatically launches runs background jobs. disable feature, set options(guildai.run_as_job = FALSE).","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/articles/guildai.html","id":"learn-more","dir":"Articles","previous_headings":"","what":"Learn More","title":"","text":"See https://.guild.ai/t/guild-ai-documentation/64 information.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tomasz Kalinowski. Author, copyright holder, maintainer.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kalinowski T (2023). guildai: R interface guildai. https://t-kalinowski.github.io/guildai-r/, https://github.com/t-kalinowski/guildai-r.","code":"@Manual{,   title = {guildai: R interface to guildai},   author = {Tomasz Kalinowski},   year = {2023},   note = {https://t-kalinowski.github.io/guildai-r/, https://github.com/t-kalinowski/guildai-r}, }"},{"path":[]},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"guildai","dir":"","previous_headings":"","what":"guildai","title":"R interface to guildai","text":"guildai provides suite tools tracking, visualizing, managing training runs experiments. {guildai} R package successor {tfruns} package. Track hyperparameters, metrics, output, source code every training run. Compare hyperparmaeters metrics across runs find best performing model. Automatically generate reports visualize individual training runs comparisons runs. changes source code required.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R interface to guildai","text":"R package provides interface Guild AI Core. R package automatically download install Guild AI Core first use, can call install_guild() directly customize installation. can install guildai package follows: Guild AI can used machine learning framework, even framework . introductory example, ’ll start Keras model applied fashion mnist dataset. ’ve used Keras R want follow along machine, can install like :","code":"# install.packages(\"guildai\") remotes::install_github(\"t-kalinowski/guildai-r\") guildai::install_guild() install.packages(\"keras\") keras::install_keras()"},{"path":[]},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"launch-a-run","dir":"","previous_headings":"Hello World","what":"Launch a run","title":"R interface to guildai","text":"start, ’ll use example training script, “train.R”. looks like: train model guildai, use guild_run() function place source() function execute R script. example: launch new R process isolated run directory using provided script. default, output stream run shown R console (output stream see source(\"train.R\", echo = TRUE) R --file=train.R).","code":"library(keras)  # Prepare data ----  fashion_mnist <- dataset_fashion_mnist()  c(train_images, train_labels) %<-% fashion_mnist$train c(test_images, test_labels) %<-% fashion_mnist$test  train_images <- train_images / 255 test_images <- test_images / 255  # Define model ----  units <- 64  model <- keras_model_sequential(input_shape = c(28, 28)) %>%   layer_flatten() %>%   layer_dense(units = units, activation = 'relu') %>%   layer_dense(units = 10, activation = 'softmax')   learning_rate <- 0.001  model %>% compile(   optimizer = optimizer_adam(learning_rate),   loss = 'sparse_categorical_crossentropy',   metrics = c('accuracy') )  model  # Fit model ----  batch_size <- 32 epochs <- 10  history <- model %>%   fit(train_images, train_labels,       validation_split = 0.2,       batch_size = batch_size,       epochs = epochs,       verbose = 2)  plot(history)  # Evaluate model ----  score <- model %>%   evaluate(test_images, test_labels,            verbose = 0) %>%   as.list()  cat('test_loss:', score$loss, \"\\n\") cat('test_accuracy:', score$accuracy, \"\\n\")  # save_model_tf(model, \"model.keras\") # saveRDS(history, \"history.rds\") guild_run(\"train.R\") ## > library(keras) ## > # Prepare data ---- ## > ## > fashion_mnist <- dataset_fashion_mnist() ## > c(train_images, train_labels) %<-% fashion_mnist$train ## > c(test_images, test_labels) %<-% fashion_mnist$test ## > train_images <- train_images / 255 ## > test_images <- test_images / 255 ## > # Define model ---- ## > ## > units <- 64 ## > model <- keras_model_sequential(input_shape = c(28, 28)) %>% ## +   layer_flatten() %>% ## +   layer_dense(units = units, activation = 'relu') %>% ## +   layer_dense(units = 10, activation = 'softmax') ## > learning_rate <- 0.001 ## > model %>% compile( ## +   optimizer = optimizer_adam(learning_rate), ## +   loss = 'sparse_categorical_crossentropy', ## +   metrics = c('accuracy') ## + ) ## > model ## Model: \"sequential\" ## ________________________________________________________________________________ ##  Layer (type)                       Output Shape                    Param # ## ================================================================================ ##  flatten (Flatten)                  (None, 784)                     0 ##  dense_1 (Dense)                    (None, 64)                      50240 ##  dense (Dense)                      (None, 10)                      650 ## ================================================================================ ## Total params: 50,890 ## Trainable params: 50,890 ## Non-trainable params: 0 ## ________________________________________________________________________________ ## > # Fit model ---- ## > ## > batch_size <- 32 ## > epochs <- 10 ## > history <- model %>% ## +   fit(train_images, train_labels, ## +       validation_split = 0.2, ## +       batch_size = batch_size, ## +       epochs = epochs, ## +       verbose = 2) ## Epoch 1/10 ## 1500/1500 - 4s - loss: 0.5404 - accuracy: 0.8120 - val_loss: 0.4449 - val_accuracy: 0.8452 - 4s/epoch - 2ms/step ## Epoch 2/10 ## 1500/1500 - 2s - loss: 0.4068 - accuracy: 0.8569 - val_loss: 0.3798 - val_accuracy: 0.8657 - 2s/epoch - 2ms/step ## Epoch 3/10 ## 1500/1500 - 3s - loss: 0.3704 - accuracy: 0.8674 - val_loss: 0.4004 - val_accuracy: 0.8585 - 3s/epoch - 2ms/step ## Epoch 4/10 ## 1500/1500 - 2s - loss: 0.3423 - accuracy: 0.8768 - val_loss: 0.3512 - val_accuracy: 0.8774 - 2s/epoch - 2ms/step ## Epoch 5/10 ## 1500/1500 - 2s - loss: 0.3212 - accuracy: 0.8840 - val_loss: 0.3708 - val_accuracy: 0.8694 - 2s/epoch - 1ms/step ## Epoch 6/10 ## 1500/1500 - 2s - loss: 0.3055 - accuracy: 0.8886 - val_loss: 0.3538 - val_accuracy: 0.8725 - 2s/epoch - 1ms/step ## Epoch 7/10 ## 1500/1500 - 2s - loss: 0.2944 - accuracy: 0.8920 - val_loss: 0.3490 - val_accuracy: 0.8759 - 2s/epoch - 2ms/step ## Epoch 8/10 ## 1500/1500 - 2s - loss: 0.2819 - accuracy: 0.8964 - val_loss: 0.3354 - val_accuracy: 0.8788 - 2s/epoch - 1ms/step ## Epoch 9/10 ## 1500/1500 - 2s - loss: 0.2725 - accuracy: 0.8997 - val_loss: 0.3381 - val_accuracy: 0.8789 - 2s/epoch - 1ms/step ## Epoch 10/10 ## 1500/1500 - 2s - loss: 0.2642 - accuracy: 0.9016 - val_loss: 0.3301 - val_accuracy: 0.8841 - 2s/epoch - 1ms/step ## > plot(history) ## > # Evaluate model ---- ## > ## > score <- model %>% ## +   evaluate(test_images, test_labels, ## +            verbose = 0) %>% ## +   as.list() ## > cat('test_loss:', score$loss, \"\\n\") ## test_loss: 0.35901263356208801 ## > cat('test_accuracy:', score$accuracy, \"\\n\") ## test_accuracy: 0.87629997730255127 ## > # save_model_tf(model, \"model.keras\") ## > # saveRDS(history, \"history.rds\") ## > ## >"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"view-runs","dir":"","previous_headings":"Hello World","what":"View Runs","title":"R interface to guildai","text":"Call guild_view() launch Guild View application, can use visualize manage runs. can use search, filter, visualize, compare, view diffs run source code output, ! also bundles TensorBoard additional visualization tool viewing runs. TODO: SCREENSHOTS Retrieve data frame run information R using runs_info(): runs_info() returns data frame information runs. introduction far, ’ve launched 1 run, runs_info() returns 1-row data frame.","code":"guild_view() run <- runs_info() tibble::glimpse(run) ## Rows: 1 ## Columns: 15 ## $ label       <chr> \"batch_size=32.0 epochs=10.0 learning_rate=0.001 units=64.… ## $ tags        <list> <> ## $ marked      <lgl> FALSE ## $ flags       <tibble[,4]> <tbl_df[1 x 4]> ## $ scalars     <tibble[,2]> <tbl_df[1 x 2]> ## $ operation   <chr> \"train.R\" ## $ started     <dttm> 2022-11-15 10:32:45 ## $ stopped     <dttm> 2022-11-15 10:33:17 ## $ comments    <list> [<tbl_df[0 x 4]>] ## $ status      <chr> \"completed\" ## $ exit_status <int> 0 ## $ deps        <list> [] ## $ project_dir <chr> \"/home/tomasz/guild/guildai-r\" ## $ dir         <chr> \"/home/tomasz/guild/guildai-r/.guild/runs/d38c0b8580a2420… ## $ id          <chr> \"d38c0b8580a24205b109292b4b9255f6\""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"run-directories","dir":"","previous_headings":"Hello World","what":"Run Directories","title":"R interface to guildai","text":"guild_view() runs_info() provide two convenient ways gather present information runs. Importantly however, run directory easily accessible. ’ll find files, plots, logs, output generated run. run directory also contains additional metadata runs guild recorded, like starting random seed, environment variables, information package versions, metadata frequently useful reproducability.","code":"fs::dir_tree(run$dir[1], all = TRUE) ## /home/tomasz/guild/guildai-r/.guild/runs/d38c0b8580a24205b109292b4b9255f6 ## ├── .guild ## │   ├── attrs ## │   │   ├── cmd ## │   │   ├── deps ## │   │   ├── env ## │   │   ├── exit_status ## │   │   ├── flags ## │   │   ├── host ## │   │   ├── id ## │   │   ├── initialized ## │   │   ├── label ## │   │   ├── op ## │   │   ├── platform ## │   │   ├── plugins ## │   │   ├── r-random-seed ## │   │   ├── run_params ## │   │   ├── sourcecode_digest ## │   │   ├── started ## │   │   ├── stopped ## │   │   ├── user ## │   │   ├── user_flags ## │   │   └── vcs_commit ## │   ├── events.out.tfevents.1668526396.horse.120400.0 ## │   ├── manifest ## │   ├── opref ## │   ├── output ## │   ├── output.index ## │   └── sourcecode ## │       └── train.R ## └── plots ##     └── Rplot001.png"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"comparing-runs","dir":"","previous_headings":"Hello World","what":"Comparing Runs","title":"R interface to guildai","text":"Let’s make couple changes training script see can improve model performance. ’ll change number units first dense layer 128, change learning_rate 0.001 0.003 run 20 rather 10 epochs. making changes source code re-run script using guild_run() : individual metrics test_loss test_accuracy visible comparison table Guild View application.","code":"guild_run(\"train.R\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"flags","dir":"","previous_headings":"","what":"Flags","title":"R interface to guildai","text":"Flags form run inputs, paramaterization. action just described, modifying learning_rate, epochs units values script launching second run, can performed guild_run() using flags interface. default, guild identifies top-level assignments scalar literals R script run flags can modified per-run. Flags can numeric (double, integer), string, boolean, complex. words, expressions like R script identified flags: See flags available R script calling guild_run() \"--help-op\" (syntax later). can launch run different flag values like : Now, inspect run sources view_runs_diff(), see source file last run updated flag values, modified manually. flags interface useful hyperparamater optimization. ’s simplest, can iterate set flag values want pass separate calls guild_run(): can also pass multiple values flag, guild automatically expand combinations grid search. example, launch 4 training runs, run unique pairing flag values: Another way launch batch runs pass data frame flags values, row corresponding run.","code":"units <- 64 learning_rate <- 0.001 batch_size <- 32 epochs <- 10 guild_run(\"train.R\", \"--help-op\") ## Usage: guild run [OPTIONS] train.R [FLAG]... ## ## Use 'guild run --help' for a list of options. ## ## Flags: ##   batch_size     (default is 32.0) ##   epochs         (default is 10.0) ##   learning_rate  (default is 0.001) ##   units          (default is 64.0) guild_run(\"train.R\", flags = list(   learning_rate = 0.001,   units = 256 )) for (learning_rate in c(0.001, 0.0003))   guild_run(\"train.R\", c(learning_rate = learning_rate)) guild_run(\"train.R\",           flags = list(learning_rate = c(0.001, 0.003),                        units = c(128, 256))) flags_df <- expand.grid(learning_rate = c(0.001, 0.003),                         units = c(128, 256)) flags_df ##   learning_rate units ## 1         0.001   128 ## 2         0.003   128 ## 3         0.001   256 ## 4         0.003   256 guild_run(\"train.R\", flags = flags_df)"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"flag-annotations","dir":"","previous_headings":"Flags","what":"Flag annotations","title":"R interface to guildai","text":"can optionally supply additional metadata individual flags placing hashpipe yaml annotations flag expression. example, can update “train.R” script following lines: Now, flag descriptions constraints appear --help-op related locations.","code":"#| description: size of first layer. #| min: 16 #| max: 256 units <- 32  #| description: Activation function to use. #| choices: [relu, sigmoid, tanh] activation <- \"relu\""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"flag-destinations","dir":"","previous_headings":"Flags","what":"Flag destinations","title":"R interface to guildai","text":"project grows, can helpful able move flag definitions main R script. , can include flags-dest frontmatter R script, specifying file guild read update flag values. can read flag values main R script using source() similar. YAML files also supported flags destination:","code":"#| flags-dest: ./flags.R  FLAGS <- envir::include(\"flags.R\", new.env()) #| flags-dest: ./flags.yml  FLAGS <- yaml::read_yaml(\"flags.yml\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"retreiving-run-flags","dir":"","previous_headings":"Flags","what":"Retreiving Run Flags","title":"R interface to guildai","text":"flags flag values associated runs returned runs_info() packed dataframe flags name.","code":"runs <- runs_info() runs %>%   select(id, flags) ## # A tibble: 2 × 2 ##   id                               flags$batch_size $epochs $learning_r…¹ $units ##   <chr>                                       <dbl>   <dbl>         <dbl>  <dbl> ## 1 ed45a09d083b4fd0a61c9fb2b4556226               32      20         0.003    128 ## 2 d38c0b8580a24205b109292b4b9255f6               32      10         0.001     64 ## # … with abbreviated variable name ¹​$learning_rate"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"scalars","dir":"","previous_headings":"","what":"Scalars","title":"R interface to guildai","text":"counterpart run flags run scalars. Whereas flags special type run input guild can help manage, scalars special type run output guild can help manage. see guild automatically identified test_accuracy test_loss run scalar outputs. default, lines printed standard output run pattern \"key: <numeric-value>\" recorded guild scalars. printing values scalar key multiple times run (e.g, loss training loop), sure also print step scalar , enable guild track history (enable visualization run metrics Guild View TensorBoard). run process produces tfevent records (e.g., keras::callback_tensorboard()), also automatically identified guild run scalars, included runs_info() (guild_view(), TensorBoard run views). runs_info() returns last observed value run scalar key, full history scalars observed runs can also accessed R directly:","code":"runs %>%   select(id, scalars) ## # A tibble: 2 × 2 ##   id                               scalars$test_accuracy $test_loss ##   <chr>                                            <dbl>      <dbl> ## 1 ed45a09d083b4fd0a61c9fb2b4556226                 0.873      0.443 ## 2 d38c0b8580a24205b109292b4b9255f6                 0.876      0.359  glimpse(runs$scalars[[1]]) ##  num [1:2] 0.873 0.876 runs_scalars() ## # A tibble: 4 × 5 ##   run                              path  tag           value  step ##   <chr>                            <chr> <chr>         <dbl> <dbl> ## 1 ed45a09d083b4fd0a61c9fb2b4556226 <NA>  test_loss     0.443     0 ## 2 ed45a09d083b4fd0a61c9fb2b4556226 <NA>  test_accuracy 0.873     0 ## 3 d38c0b8580a24205b109292b4b9255f6 <NA>  test_loss     0.359     0 ## 4 d38c0b8580a24205b109292b4b9255f6 <NA>  test_accuracy 0.876     0"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"managing-runs","dir":"","previous_headings":"","what":"Managing runs","title":"R interface to guildai","text":"Guild comes family functions managing runs. Annotate runs: runs_comment(), runs_mark() runs_tag(). Move, archive, copy runs: runs_export() runs_import(). Delete runs: runs_delete() runs_purge() runs_restore(). runs_* family functions take runs first argument, can composed %>% runs_info() runs_scalars(). example: runs arguments can supplied data frame, returned runs_info() runs_scalars(), like example . runs can also character vector, flexible syntax supported specifying runs selections: example, runs can id, integer (n-th last run), combination filter specifications like --running --started 'last hour'. See resolve_run_ids(\"--help\") details.","code":"library(dplyr)  best <- runs_scalars() %>%   filter(tag == \"test_accuracy\") %>%   slice_max(value)  best ## # A tibble: 1 × 5 ##   run                              path  tag           value  step ##   <chr>                            <chr> <chr>         <dbl> <dbl> ## 1 d38c0b8580a24205b109292b4b9255f6 <NA>  test_accuracy 0.876     0  best %>%   runs_tag(\"best\") %>%   runs_export(\"./best-runs\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"supplying-guild-options","dir":"","previous_headings":"","what":"Supplying guild options","title":"R interface to guildai","text":"https://.guild.ai/t/user-config-reference/173 Guild options can supplied hashpipe yaml frontmatter script. example, can inform guild script operation store csv files project part run directory modifying front script like : comprehensive listing options can supplied guild via script frontmatter can found .","code":"#| flags-dest: ./flags.R #| sourcecode: #|   - exclude: '*.csv'"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"using-guild-from-the-terminal","dir":"","previous_headings":"","what":"Using guild from the terminal","title":"R interface to guildai","text":"guild can also used directly terminal. Call R function export_guild_cli() place guild executable installed guildai::install_guild() PATH: can launch runs perform guild operations terminal: move terminal R console, almost syntax supported terminal can used R passing strings respective R functions. default, R character vectors supplied ... throughout R functions quoted system shell passed guild. enables usage like: additional conveniences provided passing command line options R. Use () avoid quoting string shell, allowing pass multiple arguments single string. arguments take values, can pass R named arguments named objects. _ argument name converted -, -- prefix automatically added, batch_comment = \"foo\" becomes --batch_comment 'foo'. boolean values understood switches, keep_run = TRUE translated --keep-run. names vectors automatically recycled shell, tag = c(\"\", \"b\" \"c\") becomes --tag --tag b --tag c. different R expressions invoke guild identical system calls.","code":"export_guild_cli(dest = \"~/bin\") guild run train.R guild run train.R batch_size='[32,64]' guild_run(\"train.R\", \"batch_size=[32,64]\") runs_info(marked = TRUE, started = 'last hour')  runs_info(\"--marked\", \"--started\" = \"last hour\") runs_info(\"--marked\", c(\"--started\", \"last hour\")) runs_info(\"--marked\", c(\"--started\" = \"last hour\")) runs_info(c(\"--marked\", \"--started\", \"last hour\")) runs_info(I(\"--marked --started 'last hour'\")) runs_info(I(\"-Fm -Fs 'last hour'\")) runs_info(\"-Fm\", \"-Fs\" = \"last hour\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"end-to-end-example","dir":"","previous_headings":"","what":"End to End Example","title":"R interface to guildai","text":"tie things together, ’ll use guild explore impact units test_accuracy training script. can see compare run flags run scalars R:","code":"units <- (2 ^ (4:11)) %>% c(diff(., 2)) %>% sort() units ##  [1]   16   32   48   64   96  128  192  256  384  512  768 1024 1536 2048 guildai::guild_run(\"train.R\",                    flags = list(units = units)) runs <- runs_info(seq_along(units))  df <- runs %>%   select(flags, scalars)  df ## # A tibble: 14 × 2 ##    flags$batch_size $epochs $learning_rate $units scalars$test_accuracy $test_…¹ ##               <dbl>   <dbl>          <dbl>  <dbl>                 <dbl>    <dbl> ##  1               32      10          0.001   2048                 0.876    0.370 ##  2               32      10          0.001   1536                 0.882    0.343 ##  3               32      10          0.001   1024                 0.883    0.340 ##  4               32      10          0.001    768                 0.880    0.367 ##  5               32      10          0.001    512                 0.877    0.377 ##  6               32      10          0.001    384                 0.876    0.364 ##  7               32      10          0.001    256                 0.877    0.356 ##  8               32      10          0.001    192                 0.877    0.348 ##  9               32      10          0.001    128                 0.882    0.346 ## 10               32      10          0.001     96                 0.874    0.356 ## 11               32      10          0.001     64                 0.879    0.345 ## 12               32      10          0.001     48                 0.875    0.363 ## 13               32      10          0.001     32                 0.858    0.398 ## 14               32      10          0.001     16                 0.861    0.399 ## # … with abbreviated variable name ¹​$test_loss library(ggplot2) ggplot(df, aes(x = flags$units, y = scalars$test_accuracy)) +   geom_point() + geom_smooth()"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"addin","dir":"","previous_headings":"End to End Example","what":"Addin","title":"R interface to guildai","text":"guildai package installs RStudio IDE addin provides quick access frequently used functions Addins menu: Note can use Tools -> Modify Keyboard Shortcuts within RStudio assign keyboard shortcut one addin commands.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"background-training","dir":"","previous_headings":"End to End Example","what":"Background Training","title":"R interface to guildai","text":"Since training runs can become quite lengthy, ’s often useful run background order keep R console free work. can launch guild run without blocking R console specifying guild_run(background = TRUE) call. can view real-time outputs run(s) using guild_view(). Alternatively, can launch training runs terminal pane: running within RStudio can course use system terminal window background training.","code":"Rscript -e 'guildai::guild_run(\"train.R\")'"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/dot-view_runs_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"compare runs — .view_runs_diff","title":"compare runs — .view_runs_diff","text":"compare runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/dot-view_runs_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare runs — .view_runs_diff","text":"","code":".view_runs_diff(   runs = \"1:2\",   output_dir = file.path(tempdir(), paste(ids, collapse = \"-\")),   template = system.file(\"templates/compare-runs.qmd\", package = \"guildai\"),   viewer = getOption(\"guildai.viewer\"),   ... )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/dot-view_runs_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare runs — .view_runs_diff","text":"runs runs selection two runs. Defaults latest two runs. output_dir place rendered html template Report template viewer Viewer display training run information within (default internal page viewer available, otherwise R session default web browser, utils::browseURL()). ... passed quarto::quarto_render()","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/dot-view_runs_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare runs — .view_runs_diff","text":"path generated html, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_api_runs_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"guild_api_runs_cli\nShow runs as JSON. — guild_api_runs_cli","title":"guild_api_runs_cli\nShow runs as JSON. — guild_api_runs_cli","text":"IMPORTANT: command experimental subject change without notice.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_api_runs_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"guild_api_runs_cli\nShow runs as JSON. — guild_api_runs_cli","text":"","code":"guild_api_runs_cli(   ...,   format = NA,   filter = NULL,   operation = NULL,   label = NULL,   unlabeled = NA,   tag = NULL,   comment = NULL,   marked = NA,   unmarked = NA,   started = NULL,   digest = NULL,   running = NA,   completed = NA,   error = NA,   terminated = NA,   pending = NA,   staged = NA,   api_version = NULL,   deleted = NA,   include_batch = NA )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_api_runs_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"guild_api_runs_cli\nShow runs as JSON. — guild_api_runs_cli","text":"... passed guild executable. Arguments automatically quoted shQuote(), unless protected (). Pass '--help' help = TRUE see options. format (bool) Format JSON outout. filter Filter runs using filter expression. See Filter Expression details.. operation Filter runs operations matching VAL. label Filter runs labels matching VAL. show unlabeled runs, use unlabeled. unlabeled (bool) Filter runs without labels. tag Filter runs TAG. comment Filter runs comments matching VAL. marked (bool) Filter marked runs. unmarked (bool) Filter unmarked runs. started Filter runs started within RANGE. See valid time ranges. digest Filter runs matching source code digest. running (bool) Filter runs still running. completed (bool) Filter completed runs. error (bool) Filter runs exited error. terminated (bool) Filter runs terminated user. pending (bool) Filter pending runs. staged (bool) Filter staged runs. api_version API version. deleted (bool) Show deleted runs. include_batch (bool) Include batch runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy run files into the current project working directory — guild_merge","title":"Copy run files into the current project working directory — guild_merge","text":"Copy run files current project working directory","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy run files into the current project working directory — guild_merge","text":"","code":"guild_merge(run = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy run files into the current project working directory — guild_merge","text":"run run selection ... Arguments passed guild_merge_cli filter Filter runs using filter expression. See Filter Expression details.. operation Filter runs operations matching VAL. label Filter runs labels matching VAL. show unlabeled runs, use unlabeled. unlabeled (bool) Filter runs without labels. tag Filter runs TAG. comment Filter runs comments matching VAL. marked (bool) Filter marked runs. unmarked (bool) Filter unmarked runs. started Filter runs started within RANGE. See valid time ranges. digest Filter runs matching source code digest. running (bool) Filter runs still running. completed (bool) Filter completed runs. error (bool) Filter runs exited error. terminated (bool) Filter runs terminated user. pending (bool) Filter pending runs. staged (bool) Filter staged runs. target_dir Directory merge run files (required project directory determined run). sourcecode (bool) copy run source code. Implies use skip_deps. used skip_sourcecode. (bool) Copy run files. May used skip_sourcecode, skip_deps, exclude copy skipped/excluded files. skip_sourcecode (bool) copy run source code. skip_deps (bool) copy project-local dependencies. exclude Exclude file pattern (may used multiple times). no_summary (bool) generate run summary. summary_name Name used run summary. Use '$run_id' name include run ID. preview (bool) Show happen merge. replace (bool) Allow replacement existing files. used no_replace no_replace (bool) Fail target file replaced, even file committed project VCS. used replace.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy run files into the current project working directory — guild_merge","text":"","code":"if(FALSE) { guild_merge(\"--help\") runs_scalars() %>%   dplyr::slice_max(\"epoch_acc\") %>%   guild_merge(I(\"--yes --replace\")) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"guild_merge_cli\nCopy run files to a project directory. — guild_merge_cli","title":"guild_merge_cli\nCopy run files to a project directory. — guild_merge_cli","text":"default, Guild copies run files current directory. copy files different directory, use target_dir DIR.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"guild_merge_cli\nCopy run files to a project directory. — guild_merge_cli","text":"","code":"guild_merge_cli(   ...,   filter = NULL,   operation = NULL,   label = NULL,   unlabeled = NA,   tag = NULL,   comment = NULL,   marked = NA,   unmarked = NA,   started = NULL,   digest = NULL,   running = NA,   completed = NA,   error = NA,   terminated = NA,   pending = NA,   staged = NA,   target_dir = NULL,   sourcecode = NA,   all = NA,   skip_sourcecode = NA,   skip_deps = NA,   exclude = NULL,   no_summary = NA,   summary_name = NULL,   preview = NA,   replace = NA,   no_replace = NA )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"guild_merge_cli\nCopy run files to a project directory. — guild_merge_cli","text":"... passed guild executable. Arguments automatically quoted shQuote(), unless protected (). Pass '--help' help = TRUE see options. filter Filter runs using filter expression. See Filter Expression details.. operation Filter runs operations matching VAL. label Filter runs labels matching VAL. show unlabeled runs, use unlabeled. unlabeled (bool) Filter runs without labels. tag Filter runs TAG. comment Filter runs comments matching VAL. marked (bool) Filter marked runs. unmarked (bool) Filter unmarked runs. started Filter runs started within RANGE. See valid time ranges. digest Filter runs matching source code digest. running (bool) Filter runs still running. completed (bool) Filter completed runs. error (bool) Filter runs exited error. terminated (bool) Filter runs terminated user. pending (bool) Filter pending runs. staged (bool) Filter staged runs. target_dir Directory merge run files (required project directory determined run). sourcecode (bool) copy run source code. Implies use skip_deps. used skip_sourcecode. (bool) Copy run files. May used skip_sourcecode, skip_deps, exclude copy skipped/excluded files. skip_sourcecode (bool) copy run source code. skip_deps (bool) copy project-local dependencies. exclude Exclude file pattern (may used multiple times). no_summary (bool) generate run summary. summary_name Name used run summary. Use '$run_id' name include run ID. preview (bool) Show happen merge. replace (bool) Allow replacement existing files. used no_replace no_replace (bool) Fail target file replaced, even file committed project VCS. used replace.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge_cli.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"guild_merge_cli\nCopy run files to a project directory. — guild_merge_cli","text":"Guild checks run originated current directory copying files. run associated project different directory, package, Guild exits error message. case, use target_dir override check explicit path. command fails file replaced, unless ) replace option specified b) replaced file committed project VCS unchanged. prevent replacement even file committed VCS unchanged, specify no_replace.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a guild run — guild_run","title":"Launch a guild run — guild_run","text":"Launch guild run","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a guild run — guild_run","text":"","code":"guild_run(   opspec = \"train.R\",   flags = NULL,   ...,   echo = TRUE,   as_job = getOption(\"guildai.run_as_job\", TRUE) )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a guild run — guild_run","text":"opspec typically path R script, scalar string guild recognizes valid operation. flags flag values run(s). named list vector like c(noise = .3, dropout = .4). Lists vectors length greater 1 automatically expanded grid combinations batch runs. example, list(noise = c(.2,   .3), dropout = c(.4, .5) expands batch 4 runs. dataframe flags batch runs, one row per run. scalar string like \"noise=.3 dropout=.4\". flags specification accepted terminal valid well. ... Arguments passed guild_run_cli label Set label run. tag Associate TAG run. May used multiple times. comment Comment associated run. run_dir Use alternative run directory DIR. used stage. stage (bool) Stage operation. start Start staged run restart existing run. used proto run_dir. restart Start staged run restart existing run. used proto run_dir. proto Use operation, flags source code RUN. Flags may added redefined operation. used restart. force_sourcecode (bool) Use working source code restart proto specified. Ignored otherwise. gpus Limit availabe GPUs DEVICES, comma separated list device IDs. default GPUs available. beused no_gpus. no_gpus (bool) Disable GPUs run. used gpus. batch_label Label use batch runs. Ignored non-batch runs. batch_tag Associate TAG batch. Ignored non-batch runs. May used multiple times. batch_comment Comment associated batch. optimizer Optimize run using specified algorithm. See Optimizing Runs information. optimize (bool) Optimize run using default optimizer. minimize Column minimize running optimizer. See help compare command details specifying column. May used maximize. maximize Column maximize running optimizer. See help compare command details specifying column. May used minimize. opt_flag Flag OPTIMIZER. May used multiple times. max_trials Maximum number trials run batch operations. Default optimizer specific. optimizer specified, default 20. trials Maximum number trials run batch operations. Default optimizer specific. optimizer specified, default 20. stage_trials (bool) batch operations, stage trials without running . remote Run operation remotely. force_flags (bool) Accept flag assignments, even undefined invalid values. force_deps (bool) Continue even required resource resolved. stop_after Stop operation N minutes. fail_on_trial_error (bool) Stop batch operations trial exits error. needed (bool) Run available matching run. matching run operation flag values stopped due error. background (bool) Run operation background. pidfile Run operation background, writing background process ID PIDFILE. no_wait (bool) wait remote operation complete. Ignored run local. save_trials Saves generated trials CSV batch file. See BATCH FILES information. keep_run (bool) Keep run even configured 'delete--success'. keep_batch (bool) Keep batch run rather delete success. dep Include PATH dependency. quiet (bool) show output. print_cmd (bool) Show operation command exit. print_env (bool) Show operation environment exit. print_trials (bool) Show generated trials exit. help_model (bool) Show model help exit. help_op (bool) Show operation help exit. test_output_scalars Test output scalars output. Use '-' read standard intput. test_sourcecode (bool) Test source code selection. test_flags (bool) Test flag configuration. echo whether output run shown current R console. Note, effect whether expressions echoed guild run stdout log. disable echoing expression run logs, specify #| echo: false run script frontmatter. as_job Run operation RStudio background job. ignored outside RStudio IDE.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch a guild run — guild_run","text":"return value system2(), invisibly. function primarily called side effect.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"guild_run_cli\nRun an operation. — guild_run_cli","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"default Guild tries run OPERATION default model defined current project.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"","code":"guild_run_cli(   ...,   label = NULL,   tag = NULL,   comment = NULL,   run_dir = NULL,   stage = NA,   start = NULL,   restart = NULL,   proto = NULL,   force_sourcecode = NA,   gpus = NULL,   no_gpus = NA,   batch_label = NULL,   batch_tag = NULL,   batch_comment = NULL,   optimizer = NULL,   optimize = NA,   minimize = NULL,   maximize = NULL,   opt_flag = NULL,   max_trials = NULL,   trials = NULL,   stage_trials = NA,   remote = NULL,   force_flags = NA,   force_deps = NA,   stop_after = NULL,   fail_on_trial_error = NA,   needed = NA,   background = NA,   pidfile = NULL,   no_wait = NA,   save_trials = NULL,   keep_run = NA,   keep_batch = NA,   dep = NULL,   quiet = NA,   print_cmd = NA,   print_env = NA,   print_trials = NA,   help_model = NA,   help_op = NA,   test_output_scalars = NULL,   test_sourcecode = NA,   test_flags = NA )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"... passed guild executable. Arguments automatically quoted shQuote(), unless protected (). Pass '--help' help = TRUE see options. label Set label run. tag Associate TAG run. May used multiple times. comment Comment associated run. run_dir Use alternative run directory DIR. used stage. stage (bool) Stage operation. start Start staged run restart existing run. used proto run_dir. restart Start staged run restart existing run. used proto run_dir. proto Use operation, flags source code RUN. Flags may added redefined operation. used restart. force_sourcecode (bool) Use working source code restart proto specified. Ignored otherwise. gpus Limit availabe GPUs DEVICES, comma separated list device IDs. default GPUs available. beused no_gpus. no_gpus (bool) Disable GPUs run. used gpus. batch_label Label use batch runs. Ignored non-batch runs. batch_tag Associate TAG batch. Ignored non-batch runs. May used multiple times. batch_comment Comment associated batch. optimizer Optimize run using specified algorithm. See Optimizing Runs information. optimize (bool) Optimize run using default optimizer. minimize Column minimize running optimizer. See help compare command details specifying column. May used maximize. maximize Column maximize running optimizer. See help compare command details specifying column. May used minimize. opt_flag Flag OPTIMIZER. May used multiple times. max_trials Maximum number trials run batch operations. Default optimizer specific. optimizer specified, default 20. trials Maximum number trials run batch operations. Default optimizer specific. optimizer specified, default 20. stage_trials (bool) batch operations, stage trials without running . remote Run operation remotely. force_flags (bool) Accept flag assignments, even undefined invalid values. force_deps (bool) Continue even required resource resolved. stop_after Stop operation N minutes. fail_on_trial_error (bool) Stop batch operations trial exits error. needed (bool) Run available matching run. matching run operation flag values stopped due error. background (bool) Run operation background. pidfile Run operation background, writing background process ID PIDFILE. no_wait (bool) wait remote operation complete. Ignored run local. save_trials Saves generated trials CSV batch file. See BATCH FILES information. keep_run (bool) Keep run even configured 'delete--success'. keep_batch (bool) Keep batch run rather delete success. dep Include PATH dependency. quiet (bool) show output. print_cmd (bool) Show operation command exit. print_env (bool) Show operation environment exit. print_trials (bool) Show generated trials exit. help_model (bool) Show model help exit. help_op (bool) Show operation help exit. test_output_scalars Test output scalars output. Use '-' read standard intput. test_sourcecode (bool) Test source code selection. test_flags (bool) Test flag configuration.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"MODEL specified, Guild uses instead default model. OPERATION may alternatively Python script. case current project ignored script run directly. Options format --NAME=VAL can passed script using flags (see ). [MODEL]:OPERATION may omitted restart proto specified, case operation used RUN used. Specify FLAG values form FLAG=VAL.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"batch-files","dir":"Reference","previous_headings":"","what":"Batch Files","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"One batch files can used run multiple trials specifying file path @PATH. example, run trials specified CSV file named trials.csv, run:   NOTE: time must specify operation batch files batch files contain flag values used run different operations command. Batch files may formatted CSV, JSON, YAML. Format determined file extension. entry file used set flags trial run. CSV files must header row containing flag names. subsequent row corresponding list flag values Guild uses generated trial. JSON YAML files must contain top-level list flag--value maps. Use print_trials preview trials run specified batch files.","code":"guild run [MODEL:]OPERATION @trials.csv"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"flag-lists","dir":"Reference","previous_headings":"","what":"Flag Lists","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"list flag values may specified using syntax [VAL1[,VAL2]...]. Lists containing white space must quoted. list values provided, Guild generates trial run value. multiple flags list values, Guild generates cartesian product possible flag combinations. Flag lists may used perform grid search operations. example, following generates four runs operation train flags learning-rate batch-size:   can preview trials generated flag lists using print_trials. can save generated trials batch file using save_trials. information, see PREVIEWING SAVING TRIALS . optimizer specified, flag lists may take different meaning depending type optimizer. example, random optimizer randomly selects values flag list, rather generate trials value. See OPTIMIZERS information.","code":"guild run train learning-rate[0.01,0.1] batch-size=[10,100]"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"optimizers","dir":"Reference","previous_headings":"","what":"Optimizers","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"run may optimized using optimizer. optimizer runs max_trials runs using flag values flag configuration. details available optimizers behavior, refer https://guild.ai/optimizers/.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"limit-trials","dir":"Reference","previous_headings":"","what":"Limit Trials","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"using flag lists optimizers, generate trials, can limit number trials max_trials. default, Guild limits number generated trials 20. Guild limits trials randomly sampling maximum number total list generated files. can specify seed used random sample random_seed. random seed guaranteed generate consistent results used version Python. used across different versions Python, results may inconsistent.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"preview-or-save-trials","dir":"Reference","previous_headings":"","what":"Preview or Save Trials","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"flag lists (used grid search) optimizer used, can preview generated trials using print_trials. can save generated trials CSV batch file using save_trials.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"start-an-operation-using-a-prototype-run","dir":"Reference","previous_headings":"","what":"Start an Operation Using a Prototype Run","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"proto specified, Guild applies operation, flags, source code used RUN new operation. may add redefine flags new operation. may use alternative operation, case flag values source code RUN applied. RUN must run ID unique run ID prefix.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"restart-an-operation","dir":"Reference","previous_headings":"","what":"Restart an Operation","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"restart specified, RUN restarted using operation flags. Unlike proto, restart create new run. change operation, flags, source code, run directory restarting run.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"staging-an-operation","dir":"Reference","previous_headings":"","what":"Staging an Operation","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"Use stage stage operation run later. Use start staged run ID start . start specified, RUN started using rules applied restart (see ).","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"alternate-run-directory","dir":"Reference","previous_headings":"","what":"Alternate Run Directory","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"run operation outside Guild's run management facility, use run_dir stage-dir specify alternative run directory. options useful developing debugging operation. Use stage-dir prepare run directory operation without running operation . useful want verify run directory layout manually run operation prepared directory. NOTE: Runs started run_dir visible Guild appear run listings.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"control-visible-gpus","dir":"Reference","previous_headings":"","what":"Control Visible GPUs","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"default, operations access available GPU devices. limit GPU devices available run, use gpus. example, limit visible GPU devices 0 1, run:   disable available GPUs, use no_gpus. NOTE: gpus no_gpus used construct CUDA_VISIBLE_DEVICES environment variable used run process. CUDA_VISIBLE_DEVICES set, using either options redefines environment variable run.","code":"guild run gpus 0,1 ..."},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"optimize-runs","dir":"Reference","previous_headings":"","what":"Optimize Runs","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"Use optimizer run operation multiple times attempt optimize result. Use minimize maximize indicate optimized. Use --max-runs indicate maximum number runs optimizer generate.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"edit-flags","dir":"Reference","previous_headings":"","what":"Edit Flags","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"Use edit_flags use editor review modify flag values. Guild uses editor defined VISUAL EDITOR environment variables. neither environment variable defined, Guild uses editor suitable current platform.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"debug-source-code","dir":"Reference","previous_headings":"","what":"Debug Source Code","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"Use debug_sourcecode specify location project source code debugging. Guild uses path instead location copied soure code run. example, debugging project files, use option ensure modules loaded project location rather run directory.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run_cli.html","id":"breakpoints","dir":"Reference","previous_headings":"","what":"Breakpoints","title":"guild_run_cli\nRun an operation. — guild_run_cli","text":"Use break set breakpoints Python based operations. LOCATION may specified [FILENAME:]LINE MODULE.FUNCTION. FILENAME specified, main module assumed. Use value 1 break start main module (line 1). Relative file names resolved relative location Python system path. can omit .py extension. line number correspond valid breakpoint, Guild attempts set breakpoint next valid breakpoint line applicable module.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"command generally used specifying run ID another Guild command. example, restart latest train run:","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"","code":"guild_select_cli(   ...,   all = NA,   min = NULL,   max = NULL,   short_id = NA,   attr = NULL,   path = NA,   dir = NA,   filter = NULL,   operation = NULL,   label = NULL,   unlabeled = NA,   tag = NULL,   comment = NULL,   marked = NA,   unmarked = NA,   started = NULL,   digest = NULL,   running = NA,   completed = NA,   error = NA,   terminated = NA,   pending = NA,   staged = NA )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"... passed guild executable. Arguments automatically quoted shQuote(), unless protected (). Pass '--help' help = TRUE see options. (bool) Select matching runs, just latest. min Select run lowest value specified COLSPEC. max Select run highest value specified COLSPEC. short_id (bool) Use short ID. attr Show specified run attribute rather run ID. path (bool) Show run path. dir (bool) Show run path. filter Filter runs using filter expression. See Filter Expression details.. operation Filter runs operations matching VAL. label Filter runs labels matching VAL. show unlabeled runs, use unlabeled. unlabeled (bool) Filter runs without labels. tag Filter runs TAG. comment Filter runs comments matching VAL. marked (bool) Filter marked runs. unmarked (bool) Filter unmarked runs. started Filter runs started within RANGE. See valid time ranges. digest Filter runs matching source code digest. running (bool) Filter runs still running. completed (bool) Filter completed runs. error (bool) Filter runs exited error. terminated (bool) Filter runs terminated user. pending (bool) Filter pending runs. staged (bool) Filter staged runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"","code":"`guild run --restart $(guild select -o train)`"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"specify-a-run","dir":"Reference","previous_headings":"","what":"Specify a Run","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"may specify run using run ID, run ID prefix, one-based index corresponding run returned list command. RUN specified, latest matching run selected.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"selecting-min-or-max-scalar","dir":"Reference","previous_headings":"","what":"Selecting Min or Max Scalar","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"select run lowest highest column value, use min max respectively. example, select run lowest loss scalar value, use min loss. help COLSPEC formatting, see COLUMN SPECS compare help running guild compare help. run filters applied selecting minimum maximium scalar value.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"filter-by-operation","dir":"Reference","previous_headings":"","what":"Filter by Operation","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"Runs may filtered operation using operation.  run included part full operation name, including package model name, matches value. Use operation multiple times include runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"filter-by-label","dir":"Reference","previous_headings":"","what":"Filter by Label","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"Use label include runs labels containing specified value. select runs contain label, specify dash '-' VAL. Use label multiple times include runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"filter-by-tag","dir":"Reference","previous_headings":"","what":"Filter by Tag","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"Use tag include runs specified tag. Tags must match completely case sensitive. Use tag multiple times include runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"filter-by-marked-and-unmarked","dir":"Reference","previous_headings":"","what":"Filter by Marked and Unmarked","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"Use marked include marked runs. Use unmarked include unmarked runs. option may used marked.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"filter-by-expression","dir":"Reference","previous_headings":"","what":"Filter by Expression","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"Use filter limit runs match filter expressions. Filter expressions compare run attributes, flag values, scalars target values. may include multiple expressions logical operators. example, match runs flag batch-size equal 100 loss less 0.8, use:   IMPORTANT: must quote EXPR contains spaces characters shell uses (e.g. '<' '>'). Target values may numbers, strings lists containing numbers strings. Strings contain spaces must quoted, otherwise target string values require quotes. Lists defined using square braces item separated comma. Comparisons may use following operators: '=', '!=' ('<>'), '<', '<=', '>', '>='. Text comparisons may use 'contains' test case-insensitive string membership. value may tested membership list using '' '' respectively. value may tested undefined using 'undefined' defined using 'undefined'. Logical operators include '' ''. expression may negated preceding ''. Parentheses may used control order precedence expressions evaluated. value reference matches one type run information (e.g. flag named 'label', also run attribute), value read order run attribute, flag value, scalar. disambiguate reference, use prefix attr:, flag:, scalar: needed. example, filter using flag value named 'label', use 'flag:label'. examples: operation = train acc > 0.9 operation = train (acc > 0.9 loss < 0.3) batch-size = 100 batch-size = 200 batch-size [100,200] batch-size [400,800] batch-size undefined batch-size undefined label contains best operation [test,deploy] status [error,terminated] NOTE: Comments tags supported filter expressions time. Use comment tag options along filter expressions refine selection.","code":"filter 'batch-size = 10 and loss < 0.8'"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"filter-by-run-start-time","dir":"Reference","previous_headings":"","what":"Filter by Run Start Time","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"Use started limit runs started within specified time range. IMPORTANT: must quote RANGE values contain spaces. example, filter runs started within last hour, use option:   can specify time range using several different forms: DATETIME DATETIME DATETIME DATETIME last N minutes|hours|days today|yesterday week|month|year last week|month|year N days|weeks|months|years ago DATETIME may specified date format YY-MM-DD (leading YY- may omitted) time format HH:MM (24 hour clock). date time may specified together DATE TIME. using DATETIME DATETIME, values DATETIME may specified either order. specifying values like minutes hours trailing s may omitted improve readability. may also use min instead minutes hr instead hours. Examples: 7-1 9:00 1-1 4-30 10:00 15:00 last 30 min last 6 hours today week last month 3 weeks ago","code":"started 'last hour'"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"filter-by-source-code-digest","dir":"Reference","previous_headings":"","what":"Filter by Source Code Digest","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"show runs specific source code digest, use -g digest complete partial digest value.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_select_cli.html","id":"filter-by-run-status","dir":"Reference","previous_headings":"","what":"Filter by Run Status","title":"guild_select_cli\nSelect a run and shows its ID. — guild_select_cli","text":"Runs may also filtered specifying one status filters: running, completed, error, terminated. may used together include runs match filters. example include runs either terminated exited error, use terminated error, short form -Set. may combine one status character -S expand filter. example, -Set shows runs terminated error status. Status filters applied RUN indexes resolved. example, run index 1 latest run matches status filters.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch Guild Viewer — guild_view","title":"Launch Guild Viewer — guild_view","text":"Launch Guild Viewer","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch Guild Viewer — guild_view","text":"","code":"guild_view(   runs = NULL,   ...,   host = NULL,   port = NULL,   include_batch = FALSE,   no_open = FALSE,   stop = FALSE )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch Guild Viewer — guild_view","text":"runs optional runs selection. ... passed guild view. host Name host interface listen . port Port listen . include_batch (bool) Include batch runs. no_open (bool) open Guild View browser. stop Stop existing Guild View application.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch Guild Viewer — guild_view","text":"url Guild View application can accessed.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch Guild Viewer — guild_view","text":"","code":"if(FALSE) {   guild_view()    # see all supported options   guild_view(\"--help\")    # three valid ways of supplying args to the guild executable   guild_view(\"--port\" = \"5678\")   guild_view(\"--port\", \"5678\")   guild_view(c(\"--port\", \"5678\")) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"Features include:","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"","code":"guild_view_cli(   ...,   host = NULL,   port = NULL,   include_batch = NA,   no_open = NA,   logging = NA,   filter = NULL,   operation = NULL,   label = NULL,   unlabeled = NA,   tag = NULL,   comment = NULL,   marked = NA,   unmarked = NA,   started = NULL,   digest = NULL,   running = NA,   completed = NA,   error = NA,   terminated = NA,   pending = NA,   staged = NA )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"... passed guild executable. Arguments automatically quoted shQuote(), unless protected (). Pass '--help' help = TRUE see options. host Name host interface listen . port Port listen . include_batch (bool) Include batch runs. no_open (bool) open Guild View browser. logging (bool) Log requests. filter Filter runs using filter expression. See Filter Expression details.. operation Filter runs operations matching VAL. label Filter runs labels matching VAL. show unlabeled runs, use unlabeled. unlabeled (bool) Filter runs without labels. tag Filter runs TAG. comment Filter runs comments matching VAL. marked (bool) Filter marked runs. unmarked (bool) Filter unmarked runs. started Filter runs started within RANGE. See valid time ranges. digest Filter runs matching source code digest. running (bool) Filter runs still running. completed (bool) Filter completed runs. error (bool) Filter runs exited error. terminated (bool) Filter runs terminated user. pending (bool) Filter pending runs. staged (bool) Filter staged runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"View filter runs Compare runs Browse run files View run images media View run output Guild View currently support starting modifying runs. operations, use applicable command line interface. Run 'guild help' complete list commands. default Guild View shows runs. can filter runs using command options described .","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"specify-runs","dir":"Reference","previous_headings":"","what":"Specify Runs","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"may use one RUN arguments indicate runs apply command. RUN may run ID, run ID prefix, one-based index corresponding run returned list command. Indexes may also specified ranges form START:END START start index END end index. Either START END may omitted. START omitted, runs END selected. END id omitted, runs START selected. START END omitted (.e. : char used ) runs selected.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"filter-by-operation","dir":"Reference","previous_headings":"","what":"Filter by Operation","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"Runs may filtered operation using operation.  run included part full operation name, including package model name, matches value. Use operation multiple times include runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"filter-by-label","dir":"Reference","previous_headings":"","what":"Filter by Label","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"Use label include runs labels containing specified value. select runs contain label, specify dash '-' VAL. Use label multiple times include runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"filter-by-tag","dir":"Reference","previous_headings":"","what":"Filter by Tag","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"Use tag include runs specified tag. Tags must match completely case sensitive. Use tag multiple times include runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"filter-by-marked-and-unmarked","dir":"Reference","previous_headings":"","what":"Filter by Marked and Unmarked","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"Use marked include marked runs. Use unmarked include unmarked runs. option may used marked.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"filter-by-expression","dir":"Reference","previous_headings":"","what":"Filter by Expression","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"Use filter limit runs match filter expressions. Filter expressions compare run attributes, flag values, scalars target values. may include multiple expressions logical operators. example, match runs flag batch-size equal 100 loss less 0.8, use:   IMPORTANT: must quote EXPR contains spaces characters shell uses (e.g. '<' '>'). Target values may numbers, strings lists containing numbers strings. Strings contain spaces must quoted, otherwise target string values require quotes. Lists defined using square braces item separated comma. Comparisons may use following operators: '=', '!=' ('<>'), '<', '<=', '>', '>='. Text comparisons may use 'contains' test case-insensitive string membership. value may tested membership list using '' '' respectively. value may tested undefined using 'undefined' defined using 'undefined'. Logical operators include '' ''. expression may negated preceding ''. Parentheses may used control order precedence expressions evaluated. value reference matches one type run information (e.g. flag named 'label', also run attribute), value read order run attribute, flag value, scalar. disambiguate reference, use prefix attr:, flag:, scalar: needed. example, filter using flag value named 'label', use 'flag:label'. examples: operation = train acc > 0.9 operation = train (acc > 0.9 loss < 0.3) batch-size = 100 batch-size = 200 batch-size [100,200] batch-size [400,800] batch-size undefined batch-size undefined label contains best operation [test,deploy] status [error,terminated] NOTE: Comments tags supported filter expressions time. Use comment tag options along filter expressions refine selection.","code":"filter 'batch-size = 10 and loss < 0.8'"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"filter-by-run-start-time","dir":"Reference","previous_headings":"","what":"Filter by Run Start Time","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"Use started limit runs started within specified time range. IMPORTANT: must quote RANGE values contain spaces. example, filter runs started within last hour, use option:   can specify time range using several different forms: DATETIME DATETIME DATETIME DATETIME last N minutes|hours|days today|yesterday week|month|year last week|month|year N days|weeks|months|years ago DATETIME may specified date format YY-MM-DD (leading YY- may omitted) time format HH:MM (24 hour clock). date time may specified together DATE TIME. using DATETIME DATETIME, values DATETIME may specified either order. specifying values like minutes hours trailing s may omitted improve readability. may also use min instead minutes hr instead hours. Examples: 7-1 9:00 1-1 4-30 10:00 15:00 last 30 min last 6 hours today week last month 3 weeks ago","code":"started 'last hour'"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"filter-by-source-code-digest","dir":"Reference","previous_headings":"","what":"Filter by Source Code Digest","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"show runs specific source code digest, use -g digest complete partial digest value.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view_cli.html","id":"filter-by-run-status","dir":"Reference","previous_headings":"","what":"Filter by Run Status","title":"guild_view_cli\nVisualize runs in a local web application. — guild_view_cli","text":"Runs may also filtered specifying one status filters: running, completed, error, terminated. may used together include runs match filters. example include runs either terminated exited error, use terminated error, short form -Set. may combine one status character -S expand filter. example, -Set shows runs terminated error status. Status filters applied RUN indexes resolved. example, run index 1 latest run matches status filters.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":null,"dir":"Reference","previous_headings":"","what":"Install guildai core — install_guild","title":"Install guildai core — install_guild","text":"installs guild executable use R package. creates isolated python virtual environment private R package installs guildai . Repeated calls install_guild() result fresh installation.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install guildai core — install_guild","text":"","code":"install_guild(guildai = \"dev\", python = find_python())"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install guildai core — install_guild","text":"guildai Character vector arguments passed directly pip install. install release version guildai, can \"guildai\". Special values \"release\" \"dev\" also accepted. python Path python binary, used create private isolated venv.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install guildai core — install_guild","text":"path guild executable","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install guildai core — install_guild","text":"requires suitable python version available system.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Install guildai core — install_guild","text":"install_guild() installs guild isolated VM. guild run python operation, python package guildai must installed python library used, E.g., pip install guildai reticulate::py_install().","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install guildai core — install_guild","text":"","code":"## Install release version: # install_guild(\"guildai\", python = reticulate::install_python())  ## Install development version # install_guild( #   guildai = \"https://api.github.com/repos/guildai/guildai/tarball/HEAD\", #   python = reticulate::install_python(\"3.10:latest\"))  ## Install local development version: # install_guild(c(\"-e\", \"~/guild/guildai\"))"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Install guild for usage in the Terminal — install_guild_cli","title":"Install guild for usage in the Terminal — install_guild_cli","text":"function makes available guild executable installed install_guild() usage Terminal.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install guild for usage in the Terminal — install_guild_cli","text":"","code":"install_guild_cli(   dest = \"~/bin\",   completions = basename(Sys.getenv(\"SHELL\")) %in% c(\"bash\", \"zsh\", \"fish\") )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install guild for usage in the Terminal — install_guild_cli","text":"dest Directory place guild executable. location PATH. completions Whether also install shell completion helpers.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild_cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install guild for usage in the Terminal — install_guild_cli","text":"path installed guild executable, invisibly.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild_cli.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install guild for usage in the Terminal — install_guild_cli","text":"Note guild executable installed R function install_guild() able run python operations. run python operations guild, must install guild target python installation pip install guildai, ensure desired guild executable PATH.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/is_run_active.html","id":null,"dir":"Reference","previous_headings":"","what":"Is code executing in the context of a guild run? — is_run_active","title":"Is code executing in the context of a guild run? — is_run_active","text":"code executing context guild run?","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/is_run_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is code executing in the context of a guild run? — is_run_active","text":"","code":"is_run_active()"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/is_run_active.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is code executing in the context of a guild run? — is_run_active","text":"Boolean","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve run ids — resolve_run_ids","title":"Resolve run ids — resolve_run_ids","text":"guild supports rich syntax runs selection throughout api. selection syntax shared ls_* runs_* families functions: runs_info(), runs_scalars(), runs_comment(), runs_label(), runs_mark(), runs_tag() runs_delete(),runs_purge(), runs_restore(), runs_export(), runs_import().","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve run ids — resolve_run_ids","text":"","code":"resolve_run_ids(runs = NULL, ..., all = TRUE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve run ids — resolve_run_ids","text":"runs runs selection. data.frame, columns id run used run id. Otherwise, argument coerced character vector, passed guild runs filter selection. Wrap string () avoid quoting argument shell. ... arguments passed guild Return matching runs, just latest.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve run ids — resolve_run_ids","text":"character vector run ids.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve run ids — resolve_run_ids","text":"","code":"if(FALSE) { resolve_run_ids() # returns all run ids. resolve_run_ids(1) # last run resolve_run_ids(1:2) # last 2 runs resolve_run_ids(1:2, operation = \"train.py\")  # three ways of getting ids for the currently staged or running runs resolve_run_ids(staged = TRUE, running = TRUE) resolve_run_ids(\"--staged\", \"--running\") resolve_run_ids(c(\"--staged\", \"--running\")) resolve_run_ids(I(\"--staged --running\"))  # resolve_run_ids() uses the same selection rules and syntax as runs_info() stopifnot(identical(   resolve_run_ids(1),   runs_info(1)$id )) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete runs — runs_delete","title":"Delete runs — runs_delete","text":"Delete runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete runs — runs_delete","text":"","code":"runs_delete(runs = NULL, ...)  runs_purge(runs = NULL, ...)  runs_restore(runs = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete runs — runs_delete","text":"runs runs selection ... passed guild","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete runs — runs_delete","text":"runs_delete() moves runs guild managed \"trash\" directory. runs_restore() moves runs back main guild managed \"runs\" directory. runs_purge() permanently delete runs \"trash\" directory. deleted runs can purged.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Delete runs — runs_delete","text":"see deleted runs, guildai:::guild(\"runs list --deleted\") (runs_info(\"--deleted\") supported soon)","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Move or copy runs — runs_export","title":"Move or copy runs — runs_export","text":"Move copy runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move or copy runs — runs_export","text":"","code":"runs_export(runs = NULL, location, ..., move = FALSE, copy_resources = FALSE)  runs_import(runs = NULL, location, ..., move = FALSE, copy_resources = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move or copy runs — runs_export","text":"runs runs selection location directory place runs, find runs. ... passed guild move bool, whether runs moved copied import export operation. copy_resources whether run resources also copied. FALSE, (default), run resources run directory symlinks guild managed storage location.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move or copy runs — runs_export","text":"NULL, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_info.html","id":null,"dir":"Reference","previous_headings":"","what":"list guild runs — runs_info","title":"list guild runs — runs_info","text":"Returns dataframe information guild runs stored guild home. Guild home determined either consulting env var Sys.getenv(\"GUILD_HOME\"), unset, looking .guild directory, starting current working directory walking parent directories ~ /.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list guild runs — runs_info","text":"","code":"runs_info(   runs = NULL,   ...,   filter = NULL,   operation = NULL,   label = NULL,   unlabeled = NA,   tag = NULL,   comment = NULL,   marked = NA,   unmarked = NA,   started = NULL,   digest = NULL,   running = NA,   completed = NA,   error = NA,   terminated = NA,   pending = NA,   staged = NA,   deleted = NA,   include_batch = NA )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list guild runs — runs_info","text":"runs runs specification. ... passed guild. filter (character vector) Filter runs using guild filter expression. See details section. operation (character vector) Filter runs matching operations. run included part full operation name matches value. label (character vector) Filter runs matching labels. unlabeled (bool) Filter runs without labels. tag (character vector) Filter runs tag. comment (character vector) Filter runs comments matching. marked (bool) Filter marked runs. unmarked (bool) Filter unmarked runs. started (string) Filter runs started within RANGE. See details valid time ranges. digest (string) Filter runs matching source code digest. running (bool) Filter runs still running. completed (bool) Filter completed runs. error (bool) Filter runs exited error. terminated (bool) Filter runs terminated user. pending (bool) Filter pending runs. staged (bool) Filter staged runs. deleted (bool) Show deleted runs. include_batch (bool) Include batch runs.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list guild runs — runs_info","text":"dataframe runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"list guild runs — runs_info","text":"Guild support custom filter expression syntax. syntax primarily useful terminal, R users generally prefer filter returned dataframe directly using dplyr::filter() [. Nevertheless, R users can supply guild filter expressions well.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_info.html","id":"filter-by-expression","dir":"Reference","previous_headings":"","what":"Filter by Expression","title":"list guild runs — runs_info","text":"Use filter limit runs match filter expressions. Filter expressions compare run attributes, flag values, scalars target values. may include multiple expressions logical operators. example, match runs flag batch-size equal 100 loss less 0.8, use:   Target values may numbers, strings lists containing numbers strings. Lists defined using square braces item separated comma. Comparisons may use following operators: '=', '!=', '<', '<=', '>', '>='. Text comparisons may use 'contains' test case-insensitive string membership. value may tested membership list using '' '' respectively. value may tested undefined using 'undefined' defined using 'undefined'. Logical operators include '' ''. expression may negated preceding ''. Parentheses may used control order precedence expressions evaluated. value reference matches one type run information (e.g. flag named 'label', also run attribute), value read order run attribute, flag value, scalar. disambiguate reference, use prefix attr:, flag:, scalar: needed. example, filter using flag value named 'label', use 'flag:label'. examples:   NOTE: Comments tags supported filter expressions time. Use comment tag options along filter expressions refine selection.","code":"runs_info(filter = \"batch-size = 10 and loss < 0.8\") \"operation = train and acc > 0.9\" \"operation = train and (acc > 0.9 or loss < 0.3)\" \"batch-size = 100 or batch-size = 200\" \"batch-size in [100,200]\" \"batch-size not in [400,800]\" \"batch-size is undefined\" \"batch-size is not undefined\" \"label contains best and operation not in [test,deploy]\" \"status in [error,terminated]\""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_info.html","id":"filter-by-run-start-time","dir":"Reference","previous_headings":"","what":"Filter by Run Start Time","title":"list guild runs — runs_info","text":"Use started limit runs started within specified time range.   can specify time range using several different forms:   DATETIME may specified date format YY-MM-DD (leading YY- may omitted) time format HH:MM (24 hour clock). date time may specified together DATE TIME. using DATETIME DATETIME, values DATETIME may specified either order. specifying values like minutes hours trailing s may omitted improve readability. may also use min instead minutes hr instead hours. Examples:","code":"runs_info(started = 'last hour') \"after DATETIME\" \"before DATETIME\" \"between DATETIME and DATETIME\" \"last N minutes|hours|days\" \"today|yesterday\" \"this week|month|year\" \"last week|month|year\" \"N days|weeks|months|years ago\" \"after 7-1\" \"after 9:00\" \"between 1-1 and 4-30\" \"between 10:00 and 15:00\" \"last 30 min\" \"last 6 hours\" \"today\" \"this week\" \"last month\" \"3 weeks ago\""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_info.html","id":"filter-by-run-status","dir":"Reference","previous_headings":"","what":"Filter by Run Status","title":"list guild runs — runs_info","text":"Runs may also filtered specifying one status filters: running, completed, error, terminated. may used together include runs match filters. example include runs either terminated exited error, use   Status filters applied RUN indexes resolved. example, run index 1 (, runs_info(1, terminated = TRUE, error = TRUE) latest run matches status filters.","code":"runs_info(terminated = TRUE, error = TRUE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"list guild runs — runs_info","text":"","code":"if (FALSE) { if(FALSE) { withr::with_package(\"dplyr\", {  runs_info() # get the full set of runs runs_info(1) # get the most recent run runs_info(1:3) # get the last 3 runs  # some other examples for passing filter expressions runs_info(staged = TRUE) # list only staged runs runs_info(tag = c(\"convnet\", \"keras\"), started = \"last hour\") runs_info(error = TRUE)  runs <- runs_info()  # filter down the runs list to ones of interest runs <- runs %>%   filter(exit_status == 0) %>% # run ended without an error code   filter(scalars$test_accuracy > .8) %>%   filter(flags$epochs > 10) %>%   arrange(scalars$test_loss) %>%   select(id, flags, scalars)  # retrieve full scalars history from the runs of interest runs$id %>%   runs_scalars()  # export the best run runs %>%   slice_max(scalars$test_accuracy) %>%   runs_tag(\"best\") %>%   runs_export(\"./my-best-runs\")  }) } }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate runs — runs_label","title":"Annotate runs — runs_label","text":"Annotate runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate runs — runs_label","text":"","code":"runs_label(runs = NULL, label = NULL, ..., clear = FALSE)  runs_tag(runs = NULL, add = NULL, ..., remove = NULL, clear = FALSE)  runs_mark(runs = NULL, ..., clear = FALSE)  runs_comment(runs = NULL, comment = NULL, ..., delete = NULL, clear = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate runs — runs_label","text":"runs runs selection label, comment string ... passed guild. Pass \"--help\" see options. clear bool, whether clear existing tags/comments/label. add, remove character vector tags add remove delete integer vector, comment(s) delete, corresponding row number(s) dataframe found runs_info()$comments.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Annotate runs — runs_label","text":"runs_comment() open editor comment supplied.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate runs — runs_label","text":"","code":"if(FALSE) {  runs_info(1) %>% runs_tag(clear = TRUE) runs_info(1) %>% runs_tag(\"foo\") runs_info(1)$tags runs_info(1) %>% runs_tag(\"bar\") runs_info(1)$tags runs_info(1) %>% runs_tag(remove = \"foo\") runs_info(1)$tags runs_info(1) %>% runs_tag(\"baz\", clear = TRUE) runs_info(1)$tags  ## pass through options to `guild tag` cli subcommand runs_tag(\"--help\") }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_scalars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get full set of runs scalars — runs_scalars","title":"Get full set of runs scalars — runs_scalars","text":"Get full set runs scalars","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_scalars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get full set of runs scalars — runs_scalars","text":"","code":"runs_scalars(runs = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_scalars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get full set of runs scalars — runs_scalars","text":"runs runs selection ... passed go guild","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_scalars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get full set of runs scalars — runs_scalars","text":"tibble runs scalars","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_scalars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get full set of runs scalars — runs_scalars","text":"","code":"if (FALSE) { runs_scalars(1) # scalars from most recent run runs_scalars(1:2) # scalars form two most recent runs  # pass in a dataframe of runs runs_info() %>%   filter(flags$epochs > 5) %>%   runs_scalars() }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Run Summary Report — view_run_report","title":"Render a Run Summary Report — view_run_report","text":"Render Run Summary Report","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Run Summary Report — view_run_report","text":"","code":"view_run_report(   run = \"1\",   output_dir = file.path(tempdir(), id),   template = system.file(\"templates/view-run.qmd\", package = \"guildai\"),   viewer = getOption(\"guildai.viewer\"),   ... )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Run Summary Report — view_run_report","text":"run run selection. Defaults latest run. output_dir directory place rendered document. template path parameterized quarto document. viewer Viewer display training run information within (default internal page viewer available, otherwise R session default web browser, utils::browseURL()). ... passed quarto::quarto_render()","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Run Summary Report — view_run_report","text":"path generated html, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"View a runs diff — view_runs_diff","title":"View a runs diff — view_runs_diff","text":"Renders displays HTML document showing diffs two run directories.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a runs diff — view_runs_diff","text":"","code":"view_runs_diff(   runs = 1:2,   ...,   output_html = tempfile(\"guild-diff-\", fileext = \".html\"),   exclude = \".guild\",   output_empty = TRUE,   exclude_directory_metadata = c(\"yes\", \"no\", \"auto\", \"recursive\"),   viewer = utils::browseURL )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a runs diff — view_runs_diff","text":"runs runs selection two runs. Defaults latest two runs. ..., output_empty, exclude_directory_metadata Passed diffoscope. Pass \"--help\" printout arguments accepted. output_html place rendered html exclude Regex pattern files directories exclude rendered report. default, guild internal metadata store \".guild\" omitted. viewer Viewer display rendered html. Defaults utils::browseURL(), opens browser).","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a runs diff — view_runs_diff","text":"path generated html, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Write run attributes — write_run_attr","title":"Write run attributes — write_run_attr","text":"function nothing is_run_active() FALSE.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write run attributes — write_run_attr","text":"","code":"write_run_attr(name, data, ..., append = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write run attributes — write_run_attr","text":"name string data data write. needs encodable yaml. missing, existing attr deleted. ... Arguments passed yaml::.yaml line.sep line separator character(s) use indent number spaces use indenting omap determines whether convert list YAML omap; see Details column.major determines convert data.frame; see Details unicode determines whether allow unescaped unicode characters output precision number significant digits use formatting numeric values indent.mapping.sequence determines whether indent sequences mapping context handlers named list custom handler functions R objects; see Details append whether append existing attr file.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write run attributes — write_run_attr","text":"written lines, invisibly.","code":""}]
