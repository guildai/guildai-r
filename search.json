[{"path":"https://t-kalinowski.github.io/guildai-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tomasz Kalinowski. Author, copyright holder, maintainer.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kalinowski T (2022). guildai: R interface guildai. R package version 0.0.0.9001, https://t-kalinowski.github.io/guildai-r/.","code":"@Manual{,   title = {guildai: R interface to guildai},   author = {Tomasz Kalinowski},   year = {2022},   note = {R package version 0.0.0.9001},   url = {https://t-kalinowski.github.io/guildai-r/}, }"},{"path":[]},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"guildai","dir":"","previous_headings":"","what":"guildai","title":"R interface to guildai","text":"guildai provides suite tools tracking, visualizing, managing training runs experiments. {guildai} R package successor {tfruns} package. Track hyperparameters, metrics, output, source code every training run. Compare hyperparmaeters metrics across runs find best performing model. Automatically generate reports visualize individual training runs comparisons runs. changes source code required.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R interface to guildai","text":"R package provides interface Guild AI Core. R package automatically download install Guild AI Core first use, can call install_guild() directly customize installation. can install guildai package follows: Guild AI can used machine learning framework, even framework . introductory example, ’ll start Keras model applied fashion mnist dataset. ’ve used Keras R want follow along machine, can install like :","code":"# install.packages(\"guildai\") remotes::install_github(\"t-kalinowski/guildai-r\") guildai::install_guild() install.packages(\"keras\") keras::install_keras()"},{"path":[]},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"launch-a-run","dir":"","previous_headings":"Hello World","what":"Launch a run","title":"R interface to guildai","text":"start, ’ll use example training script. looks like: train model guildai, use guild_run() function place source() function execute R script. example: launch new R process isolated run directory using provided script. default, output stream run shown R console (output stream see source(\"train.R\", echo = TRUE) R --file=train.R).","code":"library(keras)  # Prepare data ----  fashion_mnist <- dataset_fashion_mnist()  c(train_images, train_labels) %<-% fashion_mnist$train c(test_images, test_labels) %<-% fashion_mnist$test  train_images <- train_images / 255 test_images <- test_images / 255  # Define model ----  units <- 64  model <- keras_model_sequential(input_shape = c(28, 28)) %>%   layer_flatten() %>%   layer_dense(units = units, activation = 'relu') %>%   layer_dense(units = 10, activation = 'softmax')   learning_rate <- 0.001  model %>% compile(   optimizer = optimizer_adam(learning_rate),   loss = 'sparse_categorical_crossentropy',   metrics = c('accuracy') )  model  # Fit model ----  batch_size <- 32 epochs <- 10  history <- model %>%   fit(train_images, train_labels,       validation_split = 0.2,       batch_size = batch_size,       epochs = epochs,       verbose = 2)  plot(history)  # Evaluate model ----  score <- model %>%   evaluate(test_images, test_labels,            verbose = 0) %>%   as.list()  cat('test_loss:', score$loss, \"\\n\") cat('test_accuracy:', score$accuracy, \"\\n\")  # save_model_tf(model, \"model.keras\") # saveRDS(history, \"history.rds\") guild_run(\"train.R\") #> > library(keras) #> > # Prepare data ---- #> > #> > fashion_mnist <- dataset_fashion_mnist() #> > c(train_images, train_labels) %<-% fashion_mnist$train #> > c(test_images, test_labels) %<-% fashion_mnist$test #> > train_images <- train_images / 255 #> > test_images <- test_images / 255 #> > # Define model ---- #> > #> > units <- 64 #> > model <- keras_model_sequential(input_shape = c(28, 28)) %>% #> +   layer_flatten() %>% #> +   layer_dense(units = units, activation = 'relu') %>% #> +   layer_dense(units = 10, activation = 'softmax') #> > learning_rate <- 0.001 #> > model %>% compile( #> +   optimizer = optimizer_adam(learning_rate), #> +   loss = 'sparse_categorical_crossentropy', #> +   metrics = c('accuracy') #> + ) #> > model #> Model: \"sequential\" #> ________________________________________________________________________________ #>  Layer (type)                       Output Shape                    Param # #> ================================================================================ #>  flatten (Flatten)                  (None, 784)                     0 #>  dense_1 (Dense)                    (None, 64)                      50240 #>  dense (Dense)                      (None, 10)                      650 #> ================================================================================ #> Total params: 50,890 #> Trainable params: 50,890 #> Non-trainable params: 0 #> ________________________________________________________________________________ #> > # Fit model ---- #> > #> > batch_size <- 32 #> > epochs <- 10 #> > history <- model %>% #> +   fit(train_images, train_labels, #> +       validation_split = 0.2, #> +       batch_size = batch_size, #> +       epochs = epochs, #> +       verbose = 2) #> Epoch 1/10 #> 1500/1500 - 4s - loss: 0.5467 - accuracy: 0.8094 - val_loss: 0.4348 - val_accuracy: 0.8504 - 4s/epoch - 2ms/step #> Epoch 2/10 #> 1500/1500 - 3s - loss: 0.4050 - accuracy: 0.8562 - val_loss: 0.3792 - val_accuracy: 0.8651 - 3s/epoch - 2ms/step #> Epoch 3/10 #> 1500/1500 - 2s - loss: 0.3658 - accuracy: 0.8679 - val_loss: 0.3589 - val_accuracy: 0.8734 - 2s/epoch - 2ms/step #> Epoch 4/10 #> 1500/1500 - 2s - loss: 0.3401 - accuracy: 0.8778 - val_loss: 0.3564 - val_accuracy: 0.8764 - 2s/epoch - 1ms/step #> Epoch 5/10 #> 1500/1500 - 2s - loss: 0.3217 - accuracy: 0.8827 - val_loss: 0.3544 - val_accuracy: 0.8755 - 2s/epoch - 2ms/step #> Epoch 6/10 #> 1500/1500 - 2s - loss: 0.3071 - accuracy: 0.8876 - val_loss: 0.3476 - val_accuracy: 0.8749 - 2s/epoch - 1ms/step #> Epoch 7/10 #> 1500/1500 - 3s - loss: 0.2925 - accuracy: 0.8921 - val_loss: 0.3434 - val_accuracy: 0.8748 - 3s/epoch - 2ms/step #> Epoch 8/10 #> 1500/1500 - 2s - loss: 0.2831 - accuracy: 0.8947 - val_loss: 0.3543 - val_accuracy: 0.8763 - 2s/epoch - 2ms/step #> Epoch 9/10 #> 1500/1500 - 2s - loss: 0.2738 - accuracy: 0.8988 - val_loss: 0.3553 - val_accuracy: 0.8738 - 2s/epoch - 2ms/step #> Epoch 10/10 #> 1500/1500 - 2s - loss: 0.2667 - accuracy: 0.9009 - val_loss: 0.3373 - val_accuracy: 0.8832 - 2s/epoch - 2ms/step #> > plot(history) #> > # Evaluate model ---- #> > #> > score <- model %>% #> +   evaluate(test_images, test_labels, #> +            verbose = 0) %>% #> +   as.list() #> > cat('test_loss:', score$loss, \"\\n\") #> test_loss: 0.36685037612915039 #> > cat('test_accuracy:', score$accuracy, \"\\n\") #> test_accuracy: 0.87269997596740723 #> > # save_model_tf(model, \"model.keras\") #> > # saveRDS(history, \"history.rds\") #> > #> >"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"view-runs","dir":"","previous_headings":"Hello World","what":"View Runs","title":"R interface to guildai","text":"can view runs (including running) “Guild View” application, calling guild_view(). Guild View App run manager visualizer. can use search, filter, visualize, compare, view diffs run source code output, ! also bundles TensorBoard additional visualization tool viewing runs. TODO: SCREENSHOTS can retrieve data frame run information R using ls_runs(): ls_runs() returns data frame information runs. introduction far, ’ve launched 1 run, ls_runs() returns 1-row data frame.","code":"guild_view() run <- ls_runs() tibble::glimpse(run) #> Rows: 1 #> Columns: 16 #> $ label      <chr> \"batch_size=32.0 epochs=10.0 learning_rate=0.001 units=64.0\" #> $ tags       <list> \"\" #> $ marked     <lgl> FALSE #> $ scalars    <list> [<tbl_df[2 x 14]>] #> $ flags      <tibble[,4]> <tbl_df[1 x 4]> #> $ operation  <chr> \"train.R\" #> $ started    <dttm> 2022-11-03 13:48:26 #> $ stopped    <dttm> 2022-11-03 13:48:58 #> $ comments   <list> [<tbl_df[0 x 4]>] #> $ status     <chr> \"completed\" #> $ exitStatus <int> 0 #> $ otherAttrs <df[,1]> <data.frame[1 x 1]> #> $ deps       <list> [] #> $ projectDir <chr> \"/home/tomasz/guild/guildai-r\" #> $ dir        <chr> \"/home/tomasz/guild/guildai-r/.guild/runs/1d06e4b5ab1f46418… #> $ id         <chr> \"1d06e4b5ab1f46418cf739576e82b909\""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"run-directories","dir":"","previous_headings":"Hello World","what":"Run Directories","title":"R interface to guildai","text":"guild_view() ls_runs() provide two convenient ways gather present information runs. Importantly however, run directory easily accessible. ’ll find files, plots, logs, output generated run. run directory also contain additional metadata runs guild recorded plain text files, like starting random seed, environment variables, information package versions, metadata frequently useful reproducability. run can also used generate summary report, paramaterized quarto document:","code":"fs::dir_tree(run$dir[1], all = TRUE) #> /home/tomasz/guild/guildai-r/.guild/runs/1d06e4b5ab1f46418cf739576e82b909 #> ├── .guild #> │   ├── attrs #> │   │   ├── cmd #> │   │   ├── deps #> │   │   ├── env #> │   │   ├── exit_status #> │   │   ├── flags #> │   │   ├── host #> │   │   ├── id #> │   │   ├── initialized #> │   │   ├── label #> │   │   ├── op #> │   │   ├── platform #> │   │   ├── r-random-seed #> │   │   ├── run_params #> │   │   ├── sourcecode_digest #> │   │   ├── started #> │   │   ├── stopped #> │   │   ├── user #> │   │   ├── user_flags #> │   │   └── vcs_commit #> │   ├── events.out.tfevents.1667497738.horse.284503.0 #> │   ├── manifest #> │   ├── opref #> │   ├── output #> │   ├── output.index #> │   └── sourcecode #> │       └── train.R #> └── plots #>     └── Rplot001.png view_run_report(run$id)"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"comparing-runs","dir":"","previous_headings":"Hello World","what":"Comparing Runs","title":"R interface to guildai","text":"Let’s make couple changes training script see can improve model performance. ’ll change number units first dense layer 128, change learning_rate 0.001 0.003 run 20 rather 10 epochs. making changes source code re-run script using guild_run() : also show us report summarizing results run, really interested comparison run previous one. individual metrics test_loss test_accuracy visible comparison table Guild View application. can also view just diffs two runs view_runs_diff() function: comparison report shows diffs run output, sourcecode, metrics, recorded run.","code":"guild_run(\"train.R\") ls_runs(1:2) %>% # select the last 2 runs   view_runs_diff()"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"flags","dir":"","previous_headings":"","what":"Flags","title":"R interface to guildai","text":"Flags form run inputs, paramaterization. action just described, modifying learning_rate, epochs units values script launching second run, can performed guild_run() using flags interface. default, guild identifies top-level assignments scalar literals R script run flags can modified per-run. Flags can numerics (doubles, integers, complex), strings, booleans. words, expressions like R script identified flags: can quickly see flags available R script passing --help-op (syntax later). can launch run different flag values like : Now, inspect run sources view_runs_diff(), see source file last run updated flag values, modified manually. flags interface useful hyperparamater optimization. ’s simplest, can iterate set flag values want pass separate calls guild_run(): can also pass multiple values flag, guild automatically expand combinations grid search. example, launch 4 training runs, run unique pairing flag values: Another way launch batch runs pass data frame flags values, row corresponding run.","code":"units <- 64 learning_rate <- 0.001 batch_size <- 32 epochs <- 10 guild_run(\"train.R\", \"--help-op\") #> Usage: guild run [OPTIONS] train.R [FLAG]... #> #> Use 'guild run --help' for a list of options. #> #> Flags: #>   batch_size     (default is 32.0) #>   epochs         (default is 10.0) #>   learning_rate  (default is 0.001) #>   units          (default is 64.0) guild_run(\"train.R\", flags = list(   learning_rate = 0.001,   units = 256 )) for (learning_rate in c(0.001, 0.0003))   guild_run(\"train.R\", c(learning_rate = learning_rate)) guild_run(\"train.R\",           flags = list(learning_rate = c(0.001, 0.003),                        units = c(128, 256))) flags_df <- expand.grid(learning_rate = c(0.001, 0.003),                         units = c(128, 256)) flags_df #>   learning_rate units #> 1         0.001   128 #> 2         0.003   128 #> 3         0.001   256 #> 4         0.003   256 guild_run(\"train.R\", flags = flags_df)"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"flag-annotations","dir":"","previous_headings":"Flags","what":"Flag annotations","title":"R interface to guildai","text":"can optionally supply additional metadata individual flags placing hashpipe yaml annotations flag expression. example, can update “train.R” script following lines: Now, descriptions constraints appear --help-op related locations.","code":"#| description: size of first layer. #| min: 16 #| max: 256 units <- 32  #| description: Activation function to use. #| choices: [relu, sigmoid, tanh] activation <- \"relu\""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"flag-destinations","dir":"","previous_headings":"Flags","what":"Flag destinations","title":"R interface to guildai","text":"project grows, ’s helpful able move flag definitions main R script. , can include flags-dest frontmatter R script, specifying file guild read update flag values. can read flag values main R script using source() similar. YAML files also supported flags destination:","code":"#| flags-dest: ./flags.R  FLAGS <- envir::include(\"flags.R\", new.env()) #| flags-dest: ./flags.yml  FLAGS <- yaml::read_yaml(\"flags.yml\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"retreiving-run-flags","dir":"","previous_headings":"Flags","what":"Retreiving Run Flags","title":"R interface to guildai","text":"flags flag values associated runs returned ls_runs() nested dataframe flags name.","code":"runs <- ls_runs() runs %>%   select(id, flags) #> # A tibble: 2 × 2 #>   id                               flags$batch_size $epochs $learning_r…¹ $units #>   <chr>                                       <dbl>   <dbl>         <dbl>  <dbl> #> 1 3c874cd260fa44efae4fbf96497d2396               32      20         0.003    128 #> 2 1d06e4b5ab1f46418cf739576e82b909               32      10         0.001     64 #> # … with abbreviated variable name ¹​$learning_rate"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"scalars","dir":"","previous_headings":"","what":"Scalars","title":"R interface to guildai","text":"counterpart run flags run scalars. Whereas flags special type run input guild can help manage, scalars special type run output guild can help manage. see guild automatically identified test_accuracy test_loss run scalar outputs. default, lines printed standard output run pattern \"key: <numeric-value>\" recorded guild scalars. printing values scalar key multiple times run (e.g, loss training loop), sure also print step scalar , enable guild track history (enable visualization run metrics Guild View TensorBoard). run process produces tfevent records (e.g., keras::callback_tensorboard()), also automatically identified guild run scalars, included ls_runs() (guild_view(), TensorBoard run views). ls_runs() returns summary run scalars, full set scalars observed runs can also accessed R directly:","code":"runs %>%   select(id, scalars) #> # A tibble: 2 × 2 #>   id                               scalars #>   <chr>                            <list> #> 1 3c874cd260fa44efae4fbf96497d2396 <tibble [2 × 14]> #> 2 1d06e4b5ab1f46418cf739576e82b909 <tibble [2 × 14]>  glimpse(runs$scalars[[1]]) #> Rows: 2 #> Columns: 14 #> $ run        <chr> \"3c874cd260fa44efae4fbf96497d2396\", \"3c874cd260fa44efae4fbf… #> $ prefix     <chr> \".guild\", \".guild\" #> $ tag        <chr> \"test_accuracy\", \"test_loss\" #> $ first_val  <dbl> 0.8794000, 0.3985335 #> $ first_step <int> 0, 0 #> $ last_val   <dbl> 0.8794000, 0.3985335 #> $ last_step  <int> 0, 0 #> $ min_val    <dbl> 0.8794000, 0.3985335 #> $ min_step   <int> 0, 0 #> $ max_val    <dbl> 0.8794000, 0.3985335 #> $ max_step   <int> 0, 0 #> $ avg_val    <dbl> 0.8794000, 0.3985335 #> $ total      <dbl> 0.8794000, 0.3985335 #> $ count      <int> 1, 1 ls_scalars() #> # A tibble: 4 × 5 #>   run                              path   tag           value  step #>   <chr>                            <chr>  <chr>         <dbl> <dbl> #> 1 3c874cd260fa44efae4fbf96497d2396 .guild test_loss     0.399     0 #> 2 3c874cd260fa44efae4fbf96497d2396 .guild test_accuracy 0.879     0 #> 3 1d06e4b5ab1f46418cf739576e82b909 .guild test_loss     0.367     0 #> 4 1d06e4b5ab1f46418cf739576e82b909 .guild test_accuracy 0.873     0"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"managing-runs","dir":"","previous_headings":"","what":"Managing runs","title":"R interface to guildai","text":"Guild comes comprehensive set functions managing runs. annotate runs: runs_comment(), runs_mark() runs_tag(). move, archive, copy runs: runs_export() runs_import() delete runs: runs_delete() runs_purge() runs_restore() runs_* family functions take runs first argument, can composed %>% ls_runs() ls_scalars(). example: runs arguments can supplied dataframe returned ls_runs() ls_scalars(), like example . runs can also character vector, flexible syntax supported specifying runs selections: runs can id, integer (n-th last run), filter specification like --running. See resolve_run_ids(\"--help\") details.","code":"library(dplyr)  best <- ls_scalars() %>%   filter(tag == \"test_accuracy\") %>%   slice_max(value)  best #> # A tibble: 1 × 5 #>   run                              path   tag           value  step #>   <chr>                            <chr>  <chr>         <dbl> <dbl> #> 1 3c874cd260fa44efae4fbf96497d2396 .guild test_accuracy 0.879     0  best %>%   runs_tag(\"best\") %>%   runs_export(\"./best-runs\")"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"supplying-guild-options","dir":"","previous_headings":"","what":"Supplying guild options","title":"R interface to guildai","text":"https://.guild.ai/t/user-config-reference/173 Guild options can supplied hashpipe yaml frontmatter script. example, can inform guild script operation store csv files project part run directory modifying front script like : comprehensive listing options can supplied guild via script frontmatter can found ","code":"#| flags-dest: ./flags.R #| sourcecode: #|   - exclude: '*.csv'"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"using-guild-from-the-terminal","dir":"","previous_headings":"","what":"Using guild from the terminal","title":"R interface to guildai","text":"guild can also used directly terminal. Call R function export_guild_cli() place guild executable installed guildai::install_guild() PATH: can launch runs perform guild operations terminal: move terminal R console, almost syntax supported terminal can used R passing strings respective R functions. default, R character vectors supplied ... throughout R functions quoted system shell passed guild. enables usage like: additional conveniences provided passing command line options R. Use () avoid quoting string shell, allowing pass multiple arguments single string. arguments take values, can pass R named arguments. five different R expressions invoke guild identical system calls.","code":"export_guild_cli(dest = \"~/bin\") guild run train.R guild run train.R batch_size='[32,64]' guild_run(\"train.R\", 'batch_size=[32,64]') ls_runs(I(\"--marked --started 'last hour'\")) ls_runs(\"--marked\", \"--started\" = \"last hour\") ls_runs(\"--marked\", \"--started\", \"last hour\") ls_runs(c(\"--marked\", \"--started\", \"last hour\")) ls_runs(\"--marked\", c(\"--started\", \"last hour\"))"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"using-flags-and-scalars-together","dir":"","previous_headings":"","what":"Using Flags and Scalars Together","title":"R interface to guildai","text":"tie things together, ’ll use guild explore impact units test_accuracy training script. can see compare run flags run scalars R:","code":"units <- (2 ^ (4:11)) %>% c(diff(., 2)) %>% sort() units #>  [1]   16   32   48   64   96  128  192  256  384  512  768 1024 1536 2048 guildai::guild_run(\"train.R\",           flags = list(units = units),           echo = FALSE) runs <- ls_runs(as.character(seq_along(units)))  df <- runs %>%   select(flags, scalars) %>%   rowwise() %>%   mutate(across(scalars, function(run_scalars_df) {     run_scalars_df %>%       select(tag, last_val) %>%       tidyr::pivot_wider(names_from = tag,                          values_from = last_val)   })) %>%   tidyr::unnest(c(flags, scalars)) %>%   arrange(units)  df #> # A tibble: 14 × 6 #>    batch_size epochs learning_rate units test_accuracy test_loss #>         <dbl>  <dbl>         <dbl> <dbl>         <dbl>     <dbl> #>  1         32     10         0.001    16         0.834     0.460 #>  2         32     10         0.001    32         0.870     0.371 #>  3         32     10         0.001    48         0.870     0.359 #>  4         32     10         0.001    64         0.878     0.353 #>  5         32     10         0.001    96         0.877     0.346 #>  6         32     10         0.001   128         0.883     0.350 #>  7         32     10         0.001   192         0.884     0.344 #>  8         32     10         0.001   256         0.882     0.335 #>  9         32     10         0.001   384         0.881     0.345 #> 10         32     10         0.001   512         0.879     0.351 #> 11         32     10         0.001   768         0.886     0.330 #> 12         32     10         0.001  1024         0.880     0.346 #> 13         32     10         0.001  1536         0.884     0.354 #> 14         32     10         0.001  2048         0.886     0.351 library(ggplot2) ggplot(df, aes(x = units, y = test_accuracy)) +   geom_point() + geom_smooth()"},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"addin","dir":"","previous_headings":"Using Flags and Scalars Together","what":"Addin","title":"R interface to guildai","text":"guildai package installs RStudio IDE addin provides quick access frequently used functions Addins menu: Note can use Tools -> Modify Keyboard Shortcuts within RStudio assign keyboard shortcut one addin commands.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/index.html","id":"background-training","dir":"","previous_headings":"Using Flags and Scalars Together","what":"Background Training","title":"R interface to guildai","text":"Since training runs can become quite lengthy, ’s often useful run background order keep R console free work. can launch guild run without blocking R console specifying guild_run(wait = FALSE) call. can view real-time outputs run(s) using guild_view(). Alternatively, can launch training runs terminal pane: running within RStudio can course use system terminal window background training.","code":"Rscript -e 'guildai::guild_run(\"train.R\")'"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/export_guild_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Export guild for usage in the Terminal — export_guild_cli","title":"Export guild for usage in the Terminal — export_guild_cli","text":"Export guild usage Terminal","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/export_guild_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export guild for usage in the Terminal — export_guild_cli","text":"","code":"export_guild_cli(dest = \"~/bin\", completions = TRUE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/export_guild_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export guild for usage in the Terminal — export_guild_cli","text":"dest place guild executable. location PATH. completions Whether also install shell completion helpers.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/export_guild_cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export guild for usage in the Terminal — export_guild_cli","text":"path guild executable, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy run files into the current project working directory — guild_merge","title":"Copy run files into the current project working directory — guild_merge","text":"Copy run files current project working directory","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy run files into the current project working directory — guild_merge","text":"","code":"guild_merge(run = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy run files into the current project working directory — guild_merge","text":"run run selection ... passed guild","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy run files into the current project working directory — guild_merge","text":"","code":"if(FALSE) { guild_merge(\"--help\") ls_scalars() %>%   dplyr::slice_max(\"epoch_acc\") %>%   guild_merge(I(\"--yes --replace\")) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a guild run — guild_run","title":"Launch a guild run — guild_run","text":"Launch guild run","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a guild run — guild_run","text":"","code":"guild_run(   opspec = \"train.R\",   flags = NULL,   ...,   wait = TRUE,   label = NULL,   tags = NULL,   echo = wait )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a guild run — guild_run","text":"opspec typically path R script, scalar string guild recognizes valid opspec. flags named list vector like c(noise = .3, dropout = .4) scalar string like \"noise=.3 dropout=.4\" dataframe flags batch runs ... Arguments passed base::system2 command system command invoked, character string. args character vector arguments command. stdout,stderr output stdout     stderr sent.  Possible values \"\", R     console (default), NULL FALSE (discard output),     TRUE (capture output character vector)     character string naming file. stdin input diverted?  \"\" means default,     alternatively character string naming file.  Ignored     input supplied. input character vector supplied, copied one     string per line temporary file, standard input     command redirected file. env character vector name=value strings set environment     variables. timeout timeout seconds, ignored 0.  limit     elapsed time running command separate process.   Fractions     seconds ignored. minimized,invisible arguments accepted Windows     ignored platform, warning. wait whether wait run finish label, tags optional strings used label tag experiments. echo whether output run shown current R console. Note, effect whether expressions echoed guild run stdout.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch a guild run — guild_run","text":"return value system2(), invisibly. function primarily called side effect.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch Guild Viewer — guild_view","title":"Launch Guild Viewer — guild_view","text":"Launch Guild Viewer","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch Guild Viewer — guild_view","text":"","code":"guild_view(runs = NULL, ..., wait = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch Guild Viewer — guild_view","text":"runs optional runs selection. ... passed guild executable. Pass --help see options. wait whether block R console application active.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/guild_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch Guild Viewer — guild_view","text":"","code":"if(FALSE) {   guild_view()    # see all supported options   guild_view(\"--help\")    # three valid ways of supplying args to the guild executable   guild_view(\"--port\" = \"5678\")   guild_view(\"--port\", \"5678\")   guild_view(c(\"--port\", \"5678\")) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":null,"dir":"Reference","previous_headings":"","what":"Install guildai core — install_guild","title":"Install guildai core — install_guild","text":"installs guild executable use package.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install guildai core — install_guild","text":"","code":"install_guild(   guildai = \"https://api.github.com/repos/guildai/guildai/tarball/HEAD\",   python = find_python() )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install guildai core — install_guild","text":"guildai character vector passed directly pip install. install release version guildai, can \"guildai\". python path python binary, used create private venv.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install guildai core — install_guild","text":"path guild binary","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/install_guild.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install guildai core — install_guild","text":"","code":"# install_guild(c(\"-e\", \"~/guild/guildai\")) # install_guild(\"~/guildai\", reticulate::install_python()) # install_guild(\"https://api.github.com/repos/guildai/guildai/tarball/HEAD\") # install_guild( #   guildai = \"https://api.github.com/repos/guildai/guildai/tarball/HEAD\", #   python = reticulate::install_python()) #"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/is_run_active.html","id":null,"dir":"Reference","previous_headings":"","what":"Is code executing in the context of a guild run? — is_run_active","title":"Is code executing in the context of a guild run? — is_run_active","text":"code executing context guild run?","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/is_run_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is code executing in the context of a guild run? — is_run_active","text":"","code":"is_run_active()"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/is_run_active.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is code executing in the context of a guild run? — is_run_active","text":"Boolean","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"list guild runs — ls_runs","title":"list guild runs — ls_runs","text":"list guild runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list guild runs — ls_runs","text":"","code":"ls_runs(...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list guild runs — ls_runs","text":"... additional arguments passed guild api runs. Try \"--help\" see options.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list guild runs — ls_runs","text":"dataframe runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_runs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"list guild runs — ls_runs","text":"","code":"if (FALSE) { withr::with_package(\"dplyr\", {  ## sort and filter using scalars pluck_scalar <- function(scalar_summary_df, val, tag, prefix = \".guild\") {   if(!length(scalar_summary_df)) return(NA)   out <- scalar_summary_df %>%     filter(tag == {{ tag }}, prefix == {{ prefix }}) %>%     pull({{ val }})   if(length(out) < 1)     out <- NA   out }  runs <- ls_runs() runs %>%   rowwise() %>%   mutate(     min_val_loss =       pluck_scalar(scalars, min_val, \"epoch_loss\", \"logs/validation\"),     .after = label) %>%   ungroup() %>%   slice_min(min_val_loss, n = 5)  }) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get full set of runs scalars — ls_scalars","title":"Get full set of runs scalars — ls_scalars","text":"Get full set runs scalars","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get full set of runs scalars — ls_scalars","text":"","code":"ls_scalars(runs = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get full set of runs scalars — ls_scalars","text":"runs runs selection ... passed go guild","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get full set of runs scalars — ls_scalars","text":"tibble runs scalars","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/ls_scalars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get full set of runs scalars — ls_scalars","text":"","code":"if (FALSE) { ls_scalars(1) # scalars from most recent run ls_scalars(1:2) # scalars form two most recent runs  # pass in a dataframe of runs ls_runs() %>%   filter(flags$epochs > 5) %>%   ls_scalars() }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve run ids — resolve_run_ids","title":"Resolve run ids — resolve_run_ids","text":"guild supports rich syntax runs selection throughout api. selection syntax shared ls_* runs_* families functions: ls_runs(), ls_scalars(), runs_comment(), runs_label(), runs_mark(), runs_tag() runs_delete(),runs_purge(), runs_restore(), runs_export(), runs_import().","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve run ids — resolve_run_ids","text":"","code":"resolve_run_ids(runs = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve run ids — resolve_run_ids","text":"runs runs selection. data.frame, columns id run used run id. Otherwise, argument coerced character vector, passed guild runs filter selection. Wrap string () avoid quoting argument shell. ... arguments passed guild","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve run ids — resolve_run_ids","text":"character vector run ids.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/resolve_run_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve run ids — resolve_run_ids","text":"","code":"if(FALSE) { resolve_run_ids() # returns all run ids. resolve_run_ids(1) # last run resolve_run_ids(1:2) # last 2 runs resolve_run_ids(1:2, \"--operation\" = \"train.py\")  # three ways of getting ids for the currently staged or running runs resolve_run_ids(\"--staged\", \"--running\") resolve_run_ids(c(\"--staged\", \"--running\")) resolve_run_ids(I(\"--staged --running\"))  # resolve_run_ids() uses the same selection rules and syntax as ls_runs() stopifnot(identical(   resolve_run_ids(1),   ls_runs(1)$id )) }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete runs — runs_delete","title":"Delete runs — runs_delete","text":"Delete runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete runs — runs_delete","text":"","code":"runs_delete(runs = NULL, ...)  runs_purge(runs = NULL, ...)  runs_restore(runs = NULL, ...)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete runs — runs_delete","text":"runs runs selection ... passed guild()","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete runs — runs_delete","text":"runs_delete() moves runs guild managed \"trash\" directory. runs_restore() moves runs back main guild managed \"runs\" directory. runs_purge() permanently delete runs \"trash\" directory. deleted runs can purged.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_delete.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Delete runs — runs_delete","text":"see deleted runs, guildai:::guild(\"runs list --deleted\") (ls_runs(\"--deleted\") supported soon)","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Move or copy runs — runs_export","title":"Move or copy runs — runs_export","text":"Move copy runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move or copy runs — runs_export","text":"","code":"runs_export(runs = NULL, location, ..., move = FALSE, copy_resources = FALSE)  runs_import(runs = NULL, location, ..., move = FALSE, copy_resources = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move or copy runs — runs_export","text":"runs runs selection location directory place runs, find runs. ... passed guild move bool, whether runs moved copied import export operation. copy_resources whether run resources also copied. FALSE, (default), run resources run directory symlinks guild managed storage location.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move or copy runs — runs_export","text":"NULL, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate runs — runs_label","title":"Annotate runs — runs_label","text":"Annotate runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate runs — runs_label","text":"","code":"runs_label(runs = NULL, label = NULL, ..., clear = FALSE)  runs_tag(runs = NULL, add = NULL, ..., remove = NULL, clear = FALSE)  runs_mark(runs = NULL, ..., clear = FALSE)  runs_comment(runs = NULL, comment = NULL, ..., delete = NULL, clear = FALSE)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate runs — runs_label","text":"runs runs selection label, comment string ... passed guild clear bool, whether clear existing tags/comments/label. add, remove character vector tags add remove delete integer vector, comment(s) delete, corresponding row number(s) dataframe found ls_runs()$comments.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Annotate runs — runs_label","text":"runs_comment() open editor comment supplied.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/runs_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate runs — runs_label","text":"","code":"if(FALSE) {  ls_runs(1) %>% runs_tag(clear = TRUE) ls_runs(1) %>% runs_tag(\"foo\") ls_runs(1)$tags ls_runs(1) %>% runs_tag(\"bar\") ls_runs(1)$tags ls_runs(1) %>% runs_tag(remove = \"foo\") ls_runs(1)$tags ls_runs(1) %>% runs_tag(\"baz\", clear = TRUE) ls_runs(1)$tags  ## pass through options to `guild tag` cli subcommand runs_tag(NULL, NULL, \"--help\") ls_runs(1) %>% runs_tag(\"--add\" = c(\"foo\", \"bar\")) ls_runs(1) %>% runs_tag(\"--add\" = \"baz\", \"--delete\" = \"bar\") ls_runs(1)$tags  }"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Run Summary Report — view_run_report","title":"Render a Run Summary Report — view_run_report","text":"Render Run Summary Report","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Run Summary Report — view_run_report","text":"","code":"view_run_report(   run = \"1\",   output_dir = file.path(tempdir(), id),   template = system.file(\"templates/view-run.qmd\", package = \"guildai\"),   viewer = getOption(\"guildai.viewer\"),   ... )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Run Summary Report — view_run_report","text":"run run selection. Defaults latest run. output_dir directory place rendered document. template path parameterized quarto document. viewer Viewer display training run information within (default internal page viewer available, otherwise R session default web browser, utils::browseURL()). ... passed quarto::quarto_render()","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_run_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Run Summary Report — view_run_report","text":"path generated html, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"compare runs — view_runs_diff","title":"compare runs — view_runs_diff","text":"compare runs","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare runs — view_runs_diff","text":"","code":"view_runs_diff(   runs = \"1:2\",   output_dir = file.path(tempdir(), paste(ids, collapse = \"-\")),   template = system.file(\"templates/compare-runs.qmd\", package = \"guildai\"),   viewer = getOption(\"guildai.viewer\"),   ... )"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare runs — view_runs_diff","text":"runs runs selection two runs. Defaults latest two runs. output_dir place rendered html template Report template viewer Viewer display training run information within (default internal page viewer available, otherwise R session default web browser, utils::browseURL()). ... passed quarto::quarto_render()","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/view_runs_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare runs — view_runs_diff","text":"path generated html, invisibly","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Write run attributes — write_run_attr","title":"Write run attributes — write_run_attr","text":"function nothing is_run_active() FALSE.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write run attributes — write_run_attr","text":"","code":"write_run_attr(name, data)"},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write run attributes — write_run_attr","text":"name string data data write. needs encodable yaml. Passing NULL delete existing attr.","code":""},{"path":"https://t-kalinowski.github.io/guildai-r/reference/write_run_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write run attributes — write_run_attr","text":"written yaml, invisibly.","code":""}]
