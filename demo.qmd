---
title: "Untitled"
format: revealjs
editor: visual
---

## Guild

Guild is a tool you can use to keep track of machine learning
experiments.

It sits somewhere between between a git history, a database, and an
orchestrator.

(slide: image w/ venn diagram of three circles, git, database, process
orcestrator. guild in the middle)

(alt fun slide: witches brew cauldren w/ things being thrown in)

(slide: image of a science notebook):
https://aids.harvard.edu/consider-the-lab-notebook/

I think of it like a lab notebook that a biologist or chemist might use.
It's an experiment journal for a scientist to record their lines of
inquiry. It's used while experiments are being conducted, to document
hypotheses, results, and an initial interpretation of the results.

A lab notebook serves as an organizational tool and a memory aid. It is
also a primary record of scientific research, an artifact that can be
referred back, or shared with a colleague.

Guild AI is an imagining of what a lab notebook could be for data
scientists.

Here is how it works.

We start with an R script. *Any* R script.

It is explicitly *unopinionated* about machine learning frameworks. It
works with tidymodels, tensorflow, torch, xgboost, mlr3, all of them
combined, or no framework at all.

To demo it at first, I'm going to show guild without any framework. Just
a simple R script named "experiment.R", and all it does does is a random
walk for 10 steps.

```{r}
y <- 0
for(step in 1:10) {
  y <- y + sample(c(1, -1), 1)
  cat("step:", step, "\n")
  cat("y:", y, "\n")
}
```

The first thing to notice is that there is no configuration with any
external service or servers. This is a local first tool.

Not only that, but there there is also no "library(guildai)" call in the
experiment script. Just like a lab notebook is not part of the
experiment, guildai is not part of your experiment script.

The natural thing to do with a script is to run it. You can run it by
calling the "source" function, (in the IDE you might click the "source"
button), or at the terminal you might type `Rscript experiment.R`.

``` r
source("experiment.R")
```

``` bash
Rscript experiment.R
```

`source()` is great while working interactively, but of course, it
leaves no record of the run. What guild provides is a replacement for
"source" that not only runs the script, but also produces a record of
the run. From R or from the terminal, it's the same command: "guild
run".

``` r
library(guildai)
guild_run("experiment.R")
```

``` bash
guild run experiment.R
```

After a run, you can view the run record produced in couple of ways.
Guild comes built-in with interfaces for viewing, managing, and
analyzing runs in four contexts: from the browser, from R, from python,
and from the terminal.

The browser viewer can be launched with `guild_view()`.

``` r
guild_view()
```

Here we see our run with some salient attributes, like a timestamp,
random seed, r packages that were loaded and so on. Guild keeps also
track of all the run outputs. Here we see what was printed to stdout. It
also saves off a snapshot of all the files that were associated with the
run.

We can rerun the same experiment, `guild_run("experiment.R")` and now we
see our 2nd run show up in the browser sidebar.

...

show meld diff view

open up .guild folder, show the run id folder, show whats in there

Show what happens if a run generates a `plot()`. Or a saved file like
`saveRDS()`.

`ls_runs()`

`ls_scalars()`

flags

tensorboard + tfevents

Annotate runs: labels, tags, comments, mark.

Manage runs: import, export; delete purge, restore

`export_guild_cli()` and the relationship between R interface and cli
interface

------------------------------------------------------------------------

Saying that you "run a run to make a run" might get confusing, so we use
a different word here: guild runs operations, and the artifact from
running an operation is a run record.

possibly to at a much later time, possibly as part of a different line
of inquire. Those who've spent any significant amount of time in a wet
lab know that some of the greatest value of a well kept lab notebook.
