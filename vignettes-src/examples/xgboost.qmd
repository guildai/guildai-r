---
title: "XGBoost with Guild AI"
---

```{r, include = FALSE}
knitr::opts_chunk$set(collapse = TRUE)

# set up a "project" directory for render
root.dir <- tempfile("guildai-sample-xgboost-project-")
dir.create(root.dir)
dir.create(file.path(root.dir, ".guild"))
file.copy("train-xgboost.R", root.dir)
knitr::opts_knit$set(root.dir = root.dir)

# help knitr capture stdout
ns <- asNamespace("guildai")
unlockBinding("system2t", ns)
ns$system2t <- function(command, args, ..., stdout = "", stderr = "", echo_cmd) {
  if(stdout == "" && stderr == "") {
    stdout <- stderr <- TRUE
    on.exit(writeLines(out))
  }
  out <- base::system2(command, args, stdout = stdout, stderr=stderr, ...)
  invisible(out)
}
options(guildai.run_as_job = FALSE)
rlang::check_installed("xgboost")
```

Here is an example showing how to use *guildai* with xgboost in R.

If this is your first exposure to *guildai*, we recommend starting with
the framework agnostic "Getting Started" guide. This example assumes
familiarity with guild concepts like *flags* and *scalars*.

We'll start with an example R script, named "train-xgboost.R", that
trains, evaluates, and saves an xgboost model using the "agaricus"
dataset. The script is adapted from the [XGBoost R
Tutorial](https://xgboost.readthedocs.io/en/stable/R-package/xgboostPresentation.html).
Here is what it looks like:

```{r, file = "train-xgboost.R", eval = FALSE}
```

A few things to note about the script:

-   There is no 'guildai' specific configuration in the script code.
    It's a regular R script, that you can safely `source()` or work with
    interactively at the REPL.
-   We declare two custom `output-scalars` patterns in the scripts
    comment frontmatter. This informs guild how to parse the default
    xgboost stdout output and extract scalar values from it.
-   At the end of the run, we save the model to the current working
    directory. This file artifacts will be stored as part of the run,
    enabling us to later recover the trained model.

With our script defined, we can launch a guild run:

```{r}
library(guildai)
guild_run("train-xgboost.R")
```

Inspecting the run flags and scalars:

```{r, paged.print = FALSE}
run <- runs_info(1)
str(run$flags)
str(run$scalars)
```

`runs_info()` returns the last value observed for each scalar name.

The full history of scalars observed is available with `runs_scalars()`.

```{r, paged.print = FALSE}
scalars <- runs_scalars(1)
scalars
```

The rich dataset returned by `runs_scalars()` is made possible via the
`output-scalars` field we provided in the frontmatter. It contains two
items:

``` verbatim
output-scalars:
  - step: '\[(\step)]'
  - '(\key):(\value)'
```

The first entry, `step: '\[(\step)]'`, tells guild the output scalar
named `step` is wrapped in brackets `[` and `]`. (Guild applies the
supplied pattern as a regular expression, so we must escape the opening
bracket with a backslash, `\[`, since we want a literal match.). `step`
is a reserved output-scalar name with special meaning, it is an integer
value that enables a run to have multiple recordings of other output
scalars.

All scalars are always associated with a `step` value, and for a given
`step`, only one value for each output-scalar name is reported. (Note
the `step` column in the dataframe returned by `runs_scalars()`). If
guild encounters multiple values for an output-scalar name within a
`step`, only the last encountered value is reported. If no `step` value
is encountered, then all scalars are assigned the default `step` value
of 0.

The second entry, `'(\key):(\value)'` tells guild that the other scalars
names and values are separated by a single colon, without spaces. The
pattern is applied multiple times per line.

The two entries combined inform guild how to parse output lines that
look like this.

``` verbatim
[1]  train-error:0.046522  train-logloss:0.544737  test-error:0.042831  test-logloss:0.543282
[2]  train-error:0.041609  train-logloss:0.441820  test-error:0.040348  test-logloss:0.440453
[3]  train-error:0.023338  train-logloss:0.367894  test-error:0.024829  test-logloss:0.367593
```

An incrementing `step` scalar is commonly used to demarcate epochs
during training. This enables viewing history of metrics during a
training run, either within TensorBoard (accessible via `guild_view()`),
or with custom code in R, like this:

```{r, message = FALSE}
library(dplyr)
library(tidyr)
library(ggplot2)

scalars %>%
  select(-path) %>%
  tidyr::separate(tag, c("data", "metric")) %>%
  ggplot(aes(x = step, y = value, color = data)) +
  facet_grid(rows = vars(metric), switch = 'y', scales = 'free_y') +
  geom_point() + geom_smooth(se = FALSE)
```

Finally, we can load the model trained during the run by accessing the
saved file from the `run$dir`.

```{r}
model <- xgboost::xgb.load(file.path(run$dir, "xgboost.model"))
model
```
