% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auto-generated-cli-opt-wrappers.R
\name{guild_merge_opts}
\alias{guild_merge_opts}
\title{guild_merge_opts
Copy run files to a project directory.}
\usage{
guild_merge_opts(
  ...,
  filter = NULL,
  operation = NULL,
  label = NULL,
  unlabeled = FALSE,
  tag = NULL,
  comment = NULL,
  marked = FALSE,
  unmarked = FALSE,
  started = NULL,
  digest = NULL,
  running = FALSE,
  completed = FALSE,
  error = FALSE,
  terminated = FALSE,
  pending = FALSE,
  staged = FALSE,
  target_dir = NULL,
  sourcecode = FALSE,
  all = FALSE,
  skip_sourcecode = FALSE,
  skip_deps = FALSE,
  exclude = NULL,
  no_summary = FALSE,
  summary_name = NULL,
  preview = FALSE,
  yes = FALSE,
  replace = FALSE,
  no_replace = FALSE
)
}
\arguments{
\item{...}{passed on to the \code{guild} executable. Pass \code{'--help'} to see all options.}

\item{filter}{Filter runs using a filter expression. See Filter by Expression above for details..}

\item{operation}{Filter runs with operations matching \code{VAL}.}

\item{label}{Filter runs with labels matching VAL. To show unlabeled runs, use --unlabeled.}

\item{unlabeled}{Filter only runs without labels.}

\item{tag}{Filter runs with TAG.}

\item{comment}{Filter runs with comments matching VAL.}

\item{marked}{Filter only marked runs.}

\item{unmarked}{Filter only unmarked runs.}

\item{started}{Filter only runs started within RANGE. See above for valid time ranges.}

\item{digest}{Filter only runs with a matching source code digest.}

\item{running}{Filter only runs that are still running.}

\item{completed}{Filter only completed runs.}

\item{error}{Filter only runs that exited with an error.}

\item{terminated}{Filter only runs terminated by the user.}

\item{pending}{Filter only pending runs.}

\item{staged}{Filter only staged runs.}

\item{target_dir}{Directory to merge run files to (required if project directory cannot be determined for the run).}

\item{sourcecode}{Only copy run source code. Implies use of \code{skip_deps}. Cannot be used with \code{skip_sourcecode}.}

\item{all}{Copy all run files. May be used with \code{skip_sourcecode}, \code{skip_deps}, and \code{exclude} to copy all but the skipped/excluded files.}

\item{skip_sourcecode}{Don't copy run source code.}

\item{skip_deps}{Don't copy project-local dependencies.}

\item{exclude}{Exclude a file or pattern (may be used multiple times).}

\item{no_summary}{Don't generate a run summary.}

\item{summary_name}{Name used for the run summary. Use '${run_id}' in the name to include the run ID.}

\item{preview}{Show what would happen on a merge.}

\item{yes}{Don't prompt before copying files.}

\item{replace}{Allow replacement of existing files. Cannot be used with --no-replace}

\item{no_replace}{Fail if any target file would be replaced, even if that file is committed to the project VCS. Cannot be used with \code{replace}.}
}
\description{
By default, Guild copies run files into the current directory. To
copy files to a different directory, use \verb{--target-dir DIR}.
}
\details{
Guild checks that the run originated from the current directory
before copying files. If the run is associated with a project from
a different directory, or is from a package, Guild exits with an
error message. In this case, use \code{target_dir} to override the
check with an explicit path.

The command fails if any file would be replaced, unless a) the
\code{replace} option is specified or b) the replaced file is
committed to the project VCS and unchanged. To prevent replacement
even when a file is committed to VCS and unchanged, specify
\code{no_replace}.
}
